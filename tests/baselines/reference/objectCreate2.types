=== tests/cases/compiler/objectCreate2.ts ===

declare var union: null | { a: number, b: string };
>union : { a: number; b: string; }
>null : null
>a : number
>b : string

var n = Object.create(null);             // any
>n : any
>Object.create(null) : any
>Object.create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>Object : ObjectConstructor
>create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>null : null

var t = Object.create({ a: 1, b: "" });  // {a: number, b: string }
>t : { a: number; b: string; }
>Object.create({ a: 1, b: "" }) : { a: number; b: string; }
>Object.create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>Object : ObjectConstructor
>create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>{ a: 1, b: "" } : { a: number; b: string; }
>a : number
>1 : 1
>b : string
>"" : ""

var u = Object.create(union);            // {a: number, b: string }
>u : { a: number; b: string; }
>Object.create(union) : { a: number; b: string; }
>Object.create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>Object : ObjectConstructor
>create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>union : { a: number; b: string; }

var e = Object.create({});               // {}
>e : {}
>Object.create({}) : {}
>Object.create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>Object : ObjectConstructor
>create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>{} : {}

var o = Object.create(<object>{});       // object
>o : object
>Object.create(<object>{}) : object
>Object.create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>Object : ObjectConstructor
>create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
><object>{} : object
>{} : {}

var a = Object.create(null, {});           // any
>a : any
>Object.create(null, {}) : any
>Object.create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>Object : ObjectConstructor
>create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>null : null
>{} : {}

var a = Object.create({ a: 1, b: "" }, {});
>a : any
>Object.create({ a: 1, b: "" }, {}) : any
>Object.create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>Object : ObjectConstructor
>create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>{ a: 1, b: "" } : { a: number; b: string; }
>a : number
>1 : 1
>b : string
>"" : ""
>{} : {}

var a = Object.create(union, {});
>a : any
>Object.create(union, {}) : any
>Object.create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>Object : ObjectConstructor
>create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>union : { a: number; b: string; }
>{} : {}

var a = Object.create({}, {});
>a : any
>Object.create({}, {}) : any
>Object.create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>Object : ObjectConstructor
>create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>{} : {}
>{} : {}

var a = Object.create(<object>{}, {});
>a : any
>Object.create(<object>{}, {}) : any
>Object.create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
>Object : ObjectConstructor
>create : { <T extends object>(o: T): T; <T extends object>(o: T): object | T; (o: object, properties: PropertyDescriptorMap): any; }
><object>{} : object
>{} : {}
>{} : {}

