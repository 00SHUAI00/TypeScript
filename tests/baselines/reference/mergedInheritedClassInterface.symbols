=== tests/cases/conformance/classes/classDeclarations/mergedInheritedClassInterface.ts ===
interface BaseInterface {
>BaseInterface : Symbol(BaseInterface, Decl(mergedInheritedClassInterface.ts, 0, 0))

    required: number;
>required : Symbol(required, Decl(mergedInheritedClassInterface.ts, 0, 25))

    optional?: number;
>optional : Symbol(optional, Decl(mergedInheritedClassInterface.ts, 1, 21))
}

declare class BaseClass {
>BaseClass : Symbol(BaseClass, Decl(mergedInheritedClassInterface.ts, 3, 1))

    baseMethod();
>baseMethod : Symbol(baseMethod, Decl(mergedInheritedClassInterface.ts, 5, 25))

    x2: number;
>x2 : Symbol(x2, Decl(mergedInheritedClassInterface.ts, 6, 17))
}

interface Child extends BaseInterface {
>Child : Symbol(Child, Decl(mergedInheritedClassInterface.ts, 8, 1), Decl(mergedInheritedClassInterface.ts, 12, 1))
>BaseInterface : Symbol(BaseInterface, Decl(mergedInheritedClassInterface.ts, 0, 0))

    x3: number;
>x3 : Symbol(x3, Decl(mergedInheritedClassInterface.ts, 10, 39))
}

declare class Child extends BaseClass {
>Child : Symbol(Child, Decl(mergedInheritedClassInterface.ts, 8, 1), Decl(mergedInheritedClassInterface.ts, 12, 1))
>BaseClass : Symbol(BaseClass, Decl(mergedInheritedClassInterface.ts, 3, 1))

    x4: number;
>x4 : Symbol(x4, Decl(mergedInheritedClassInterface.ts, 14, 39))

    method();
>method : Symbol(method, Decl(mergedInheritedClassInterface.ts, 15, 15))
}

// checks if properties actually were merged
var child : Child;
>child : Symbol(child, Decl(mergedInheritedClassInterface.ts, 20, 3))
>Child : Symbol(Child, Decl(mergedInheritedClassInterface.ts, 8, 1), Decl(mergedInheritedClassInterface.ts, 12, 1))

child.required;
>child.required : Symbol(BaseInterface.required, Decl(mergedInheritedClassInterface.ts, 0, 25))
>child : Symbol(child, Decl(mergedInheritedClassInterface.ts, 20, 3))
>required : Symbol(BaseInterface.required, Decl(mergedInheritedClassInterface.ts, 0, 25))

child.optional;
>child.optional : Symbol(BaseInterface.optional, Decl(mergedInheritedClassInterface.ts, 1, 21))
>child : Symbol(child, Decl(mergedInheritedClassInterface.ts, 20, 3))
>optional : Symbol(BaseInterface.optional, Decl(mergedInheritedClassInterface.ts, 1, 21))

child.x3;
>child.x3 : Symbol(Child.x3, Decl(mergedInheritedClassInterface.ts, 10, 39))
>child : Symbol(child, Decl(mergedInheritedClassInterface.ts, 20, 3))
>x3 : Symbol(Child.x3, Decl(mergedInheritedClassInterface.ts, 10, 39))

child.x4;
>child.x4 : Symbol(Child.x4, Decl(mergedInheritedClassInterface.ts, 14, 39))
>child : Symbol(child, Decl(mergedInheritedClassInterface.ts, 20, 3))
>x4 : Symbol(Child.x4, Decl(mergedInheritedClassInterface.ts, 14, 39))

child.baseMethod();
>child.baseMethod : Symbol(BaseClass.baseMethod, Decl(mergedInheritedClassInterface.ts, 5, 25))
>child : Symbol(child, Decl(mergedInheritedClassInterface.ts, 20, 3))
>baseMethod : Symbol(BaseClass.baseMethod, Decl(mergedInheritedClassInterface.ts, 5, 25))

child.method();
>child.method : Symbol(Child.method, Decl(mergedInheritedClassInterface.ts, 15, 15))
>child : Symbol(child, Decl(mergedInheritedClassInterface.ts, 20, 3))
>method : Symbol(Child.method, Decl(mergedInheritedClassInterface.ts, 15, 15))

