=== tests/cases/conformance/classes/classDeclarations/mergedInheritedClassInterface.ts ===
interface BaseInterface {
>BaseInterface : Symbol(BaseInterface, Decl(mergedInheritedClassInterface.ts, 0, 0))

    required: number;
>required : Symbol(required, Decl(mergedInheritedClassInterface.ts, 0, 25))

    optional?: number;
>optional : Symbol(optional, Decl(mergedInheritedClassInterface.ts, 1, 21))
}

declare class BaseClass {
>BaseClass : Symbol(BaseClass, Decl(mergedInheritedClassInterface.ts, 3, 1))

    baseMethod();
>baseMethod : Symbol(baseMethod, Decl(mergedInheritedClassInterface.ts, 5, 25))

    baseNumber: number;
>baseNumber : Symbol(baseNumber, Decl(mergedInheritedClassInterface.ts, 6, 17))
}

interface Child extends BaseInterface {
>Child : Symbol(Child, Decl(mergedInheritedClassInterface.ts, 8, 1), Decl(mergedInheritedClassInterface.ts, 12, 1))
>BaseInterface : Symbol(BaseInterface, Decl(mergedInheritedClassInterface.ts, 0, 0))

    additional: number;
>additional : Symbol(additional, Decl(mergedInheritedClassInterface.ts, 10, 39))
}

declare class Child extends BaseClass {
>Child : Symbol(Child, Decl(mergedInheritedClassInterface.ts, 8, 1), Decl(mergedInheritedClassInterface.ts, 12, 1))
>BaseClass : Symbol(BaseClass, Decl(mergedInheritedClassInterface.ts, 3, 1))

    classNumber: number;
>classNumber : Symbol(classNumber, Decl(mergedInheritedClassInterface.ts, 14, 39))

    method();
>method : Symbol(method, Decl(mergedInheritedClassInterface.ts, 15, 24))
}

// checks if properties actually were merged
var child : Child;
>child : Symbol(child, Decl(mergedInheritedClassInterface.ts, 20, 3))
>Child : Symbol(Child, Decl(mergedInheritedClassInterface.ts, 8, 1), Decl(mergedInheritedClassInterface.ts, 12, 1))

child.required;
>child.required : Symbol(BaseInterface.required, Decl(mergedInheritedClassInterface.ts, 0, 25))
>child : Symbol(child, Decl(mergedInheritedClassInterface.ts, 20, 3))
>required : Symbol(BaseInterface.required, Decl(mergedInheritedClassInterface.ts, 0, 25))

child.optional;
>child.optional : Symbol(BaseInterface.optional, Decl(mergedInheritedClassInterface.ts, 1, 21))
>child : Symbol(child, Decl(mergedInheritedClassInterface.ts, 20, 3))
>optional : Symbol(BaseInterface.optional, Decl(mergedInheritedClassInterface.ts, 1, 21))

child.additional;
>child.additional : Symbol(Child.additional, Decl(mergedInheritedClassInterface.ts, 10, 39))
>child : Symbol(child, Decl(mergedInheritedClassInterface.ts, 20, 3))
>additional : Symbol(Child.additional, Decl(mergedInheritedClassInterface.ts, 10, 39))

child.baseNumber;
>child.baseNumber : Symbol(BaseClass.baseNumber, Decl(mergedInheritedClassInterface.ts, 6, 17))
>child : Symbol(child, Decl(mergedInheritedClassInterface.ts, 20, 3))
>baseNumber : Symbol(BaseClass.baseNumber, Decl(mergedInheritedClassInterface.ts, 6, 17))

child.classNumber;
>child.classNumber : Symbol(Child.classNumber, Decl(mergedInheritedClassInterface.ts, 14, 39))
>child : Symbol(child, Decl(mergedInheritedClassInterface.ts, 20, 3))
>classNumber : Symbol(Child.classNumber, Decl(mergedInheritedClassInterface.ts, 14, 39))

child.baseMethod();
>child.baseMethod : Symbol(BaseClass.baseMethod, Decl(mergedInheritedClassInterface.ts, 5, 25))
>child : Symbol(child, Decl(mergedInheritedClassInterface.ts, 20, 3))
>baseMethod : Symbol(BaseClass.baseMethod, Decl(mergedInheritedClassInterface.ts, 5, 25))

child.method();
>child.method : Symbol(Child.method, Decl(mergedInheritedClassInterface.ts, 15, 24))
>child : Symbol(child, Decl(mergedInheritedClassInterface.ts, 20, 3))
>method : Symbol(Child.method, Decl(mergedInheritedClassInterface.ts, 15, 24))

