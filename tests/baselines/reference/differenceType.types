=== tests/cases/conformance/types/rest/differenceType.ts ===
type A = { a };
>A : A
>a : any

type Ab = { a; b };
>Ab : Ab
>a : any
>b : any

let nothing: A - 'a';
>nothing : {}
>A : A

let none: Ab - 'a' | 'b';
>none : {}
>Ab : Ab

let over: A - 'a' | 'b';
>over : {}
>A : A

let under: Ab - 'a';
>under : { b: any; }
>Ab : Ab

let partial: Ab - 'b' | 'd';
>partial : { a: any; }
>Ab : Ab

let empty: Ab - 'a' | 'b';
>empty : {}
>Ab : Ab

let nope: {} - string;
>nope : {}

let nope2: Ab - string;
>nope2 : {}
>Ab : Ab

let nope3: {} - 'a' | 'b';
>nope3 : {}

type Abcd = { a; b; c; d }
>Abcd : Abcd
>a : any
>b : any
>c : any
>d : any

function f<T,U extends keyof Abcd, V>(t: T, u: U, v: V): T - U {
>f : <T, U extends "a" | "b" | "d" | "c", V>(t: T, u: U, v: V) => T - U
>T : T
>U : U
>Abcd : Abcd
>V : V
>t : T
>T : T
>u : U
>U : U
>v : V
>V : V
>T : T
>U : U

    let vsubtkey: V - keyof T;
>vsubtkey : V - keyof T
>V : V
>T : T

    vsubtkey = vsubtkey;
>vsubtkey = vsubtkey : V - keyof T
>vsubtkey : V - keyof T
>vsubtkey : V - keyof T

    let tsubu: T - U;
>tsubu : T - U
>T : T
>U : U

    return tsubu;
>tsubu : T - U
}

const x = f<Ab, 'b' | 'd', A>({ a: 1, b: 2 }, 'b', { a: 3 })
>x : { a: any; }
>f<Ab, 'b' | 'd', A>({ a: 1, b: 2 }, 'b', { a: 3 }) : { a: any; }
>f : <T, U extends "a" | "b" | "d" | "c", V>(t: T, u: U, v: V) => T - U
>Ab : Ab
>A : A
>{ a: 1, b: 2 } : { a: number; b: number; }
>a : number
>1 : 1
>b : number
>2 : 2
>'b' : "b"
>{ a: 3 } : { a: number; }
>a : number
>3 : 3

const y = f({ a: 1, b: 2 }, 'b', { a: 3 })
>y : { a: number; }
>f({ a: 1, b: 2 }, 'b', { a: 3 }) : { a: number; }
>f : <T, U extends "a" | "b" | "d" | "c", V>(t: T, u: U, v: V) => T - U
>{ a: 1, b: 2 } : { a: number; b: number; }
>a : number
>1 : 1
>b : number
>2 : 2
>'b' : "b"
>{ a: 3 } : { a: number; }
>a : number
>3 : 3

