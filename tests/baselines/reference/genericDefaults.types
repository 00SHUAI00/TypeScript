=== tests/cases/compiler/genericDefaults.ts ===
declare const x: any;
>x : any

declare function f00<T = number>(a?: T): T;
>f00 : <T = number>(a?: T) => T
>T : T
>a : T
>T : T
>T : T

const f00c00 = f00();
>f00c00 : number
>f00() : number
>f00 : <T = number>(a?: T) => T

const f00c01 = f00(1);
>f00c01 : 1
>f00(1) : 1
>f00 : <T = number>(a?: T) => T
>1 : 1

const f00c02 = f00("a");
>f00c02 : "a"
>f00("a") : "a"
>f00 : <T = number>(a?: T) => T
>"a" : "a"

const f00c03 = f00<number>();
>f00c03 : number
>f00<number>() : number
>f00 : <T = number>(a?: T) => T

const f00c04 = f00<number>(1);
>f00c04 : number
>f00<number>(1) : number
>f00 : <T = number>(a?: T) => T
>1 : 1

const f00c05 = f00<string>("a");
>f00c05 : string
>f00<string>("a") : string
>f00 : <T = number>(a?: T) => T
>"a" : "a"

declare function f01<T, U = T>(a?: T, b?: U): [T, U];
>f01 : <T, U = T>(a?: T, b?: U) => [T, U]
>T : T
>U : U
>T : T
>a : T
>T : T
>b : U
>U : U
>T : T
>U : U

const f01c00 = f01();
>f01c00 : [{}, {}]
>f01() : [{}, {}]
>f01 : <T, U = T>(a?: T, b?: U) => [T, U]

const f01c01 = f01(1);
>f01c01 : [number, number]
>f01(1) : [number, number]
>f01 : <T, U = T>(a?: T, b?: U) => [T, U]
>1 : 1

const f01c02 = f01(1, "a");
>f01c02 : [number, string]
>f01(1, "a") : [number, string]
>f01 : <T, U = T>(a?: T, b?: U) => [T, U]
>1 : 1
>"a" : "a"

const f01c03 = f01<number>();
>f01c03 : [number, number]
>f01<number>() : [number, number]
>f01 : <T, U = T>(a?: T, b?: U) => [T, U]

const f01c04 = f01<number>(1);
>f01c04 : [number, number]
>f01<number>(1) : [number, number]
>f01 : <T, U = T>(a?: T, b?: U) => [T, U]
>1 : 1

const f01c05 = f01<number>(1, "a");
>f01c05 : [number, string]
>f01<number>(1, "a") : [number, string]
>f01 : <T, U = T>(a?: T, b?: U) => [T, U]
>1 : 1
>"a" : "a"

const f01c06 = f01<number, string>();
>f01c06 : [number, string]
>f01<number, string>() : [number, string]
>f01 : <T, U = T>(a?: T, b?: U) => [T, U]

const f01c07 = f01<number, string>(1);
>f01c07 : [number, string]
>f01<number, string>(1) : [number, string]
>f01 : <T, U = T>(a?: T, b?: U) => [T, U]
>1 : 1

const f01c08 = f01<number, string>(1, "a");
>f01c08 : [number, string]
>f01<number, string>(1, "a") : [number, string]
>f01 : <T, U = T>(a?: T, b?: U) => [T, U]
>1 : 1
>"a" : "a"

declare function f02<T extends number, U = T>(a?: T, b?: U): [T, U];
>f02 : <T extends number, U = T>(a?: T, b?: U) => [T, U]
>T : T
>U : U
>T : T
>a : T
>T : T
>b : U
>U : U
>T : T
>U : U

const f02c00 = f02();
>f02c00 : [number, number]
>f02() : [number, number]
>f02 : <T extends number, U = T>(a?: T, b?: U) => [T, U]

const f02c01 = f02(1);
>f02c01 : [1, 1]
>f02(1) : [1, 1]
>f02 : <T extends number, U = T>(a?: T, b?: U) => [T, U]
>1 : 1

const f02c02 = f02(1, "a");
>f02c02 : [1, string]
>f02(1, "a") : [1, string]
>f02 : <T extends number, U = T>(a?: T, b?: U) => [T, U]
>1 : 1
>"a" : "a"

const f02c03 = f02<number>();
>f02c03 : [number, number]
>f02<number>() : [number, number]
>f02 : <T extends number, U = T>(a?: T, b?: U) => [T, U]

const f02c04 = f02<number>(1);
>f02c04 : [number, number]
>f02<number>(1) : [number, number]
>f02 : <T extends number, U = T>(a?: T, b?: U) => [T, U]
>1 : 1

const f02c05 = f02<number>(1, "a");
>f02c05 : [number, string]
>f02<number>(1, "a") : [number, string]
>f02 : <T extends number, U = T>(a?: T, b?: U) => [T, U]
>1 : 1
>"a" : "a"

const f02c06 = f02<number, string>();
>f02c06 : [number, string]
>f02<number, string>() : [number, string]
>f02 : <T extends number, U = T>(a?: T, b?: U) => [T, U]

const f02c07 = f02<number, string>(1);
>f02c07 : [number, string]
>f02<number, string>(1) : [number, string]
>f02 : <T extends number, U = T>(a?: T, b?: U) => [T, U]
>1 : 1

const f02c08 = f02<number, string>(1, "a");
>f02c08 : [number, string]
>f02<number, string>(1, "a") : [number, string]
>f02 : <T extends number, U = T>(a?: T, b?: U) => [T, U]
>1 : 1
>"a" : "a"

declare function f03<T extends number, U extends T = T>(a?: T, b?: U): [T, U];
>f03 : <T extends number, U extends T = T>(a?: T, b?: U) => [T, U]
>T : T
>U : U
>T : T
>T : T
>a : T
>T : T
>b : U
>U : U
>T : T
>U : U

const f03c00 = f03();
>f03c00 : [number, number]
>f03() : [number, number]
>f03 : <T extends number, U extends T = T>(a?: T, b?: U) => [T, U]

const f03c01 = f03(1);
>f03c01 : [1, 1]
>f03(1) : [1, 1]
>f03 : <T extends number, U extends T = T>(a?: T, b?: U) => [T, U]
>1 : 1

const f03c02 = f03(1, 1);
>f03c02 : [1, 1]
>f03(1, 1) : [1, 1]
>f03 : <T extends number, U extends T = T>(a?: T, b?: U) => [T, U]
>1 : 1
>1 : 1

const f03c03 = f03<number>();
>f03c03 : [number, number]
>f03<number>() : [number, number]
>f03 : <T extends number, U extends T = T>(a?: T, b?: U) => [T, U]

const f03c04 = f03<number>(1);
>f03c04 : [number, number]
>f03<number>(1) : [number, number]
>f03 : <T extends number, U extends T = T>(a?: T, b?: U) => [T, U]
>1 : 1

const f03c05 = f03<number>(1, 2);
>f03c05 : [number, number]
>f03<number>(1, 2) : [number, number]
>f03 : <T extends number, U extends T = T>(a?: T, b?: U) => [T, U]
>1 : 1
>2 : 2

const f03c06 = f03<number, number>();
>f03c06 : [number, number]
>f03<number, number>() : [number, number]
>f03 : <T extends number, U extends T = T>(a?: T, b?: U) => [T, U]

const f03c07 = f03<number, number>(1);
>f03c07 : [number, number]
>f03<number, number>(1) : [number, number]
>f03 : <T extends number, U extends T = T>(a?: T, b?: U) => [T, U]
>1 : 1

const f03c08 = f03<number, number>(1, 2);
>f03c08 : [number, number]
>f03<number, number>(1, 2) : [number, number]
>f03 : <T extends number, U extends T = T>(a?: T, b?: U) => [T, U]
>1 : 1
>2 : 2

interface i00<T = number> { a: T; }
>i00 : i00<T>
>T : T
>a : T
>T : T

const i00c00 = (<i00>x).a;
>i00c00 : number
>(<i00>x).a : number
>(<i00>x) : i00<number>
><i00>x : i00<number>
>i00 : i00<T>
>x : any
>a : number

const i00c01 = (<i00<number>>x).a;
>i00c01 : number
>(<i00<number>>x).a : number
>(<i00<number>>x) : i00<number>
><i00<number>>x : i00<number>
>i00 : i00<T>
>x : any
>a : number

interface i01<T, U = T> { a: [T, U]; }
>i01 : i01<T, U>
>T : T
>U : U
>T : T
>a : [T, U]
>T : T
>U : U

const i01c00 = (<i01<number>>x).a;
>i01c00 : [number, number]
>(<i01<number>>x).a : [number, number]
>(<i01<number>>x) : i01<number, number>
><i01<number>>x : i01<number, number>
>i01 : i01<T, U>
>x : any
>a : [number, number]

const i01c01 = (<i01<number, string>>x).a;
>i01c01 : [number, string]
>(<i01<number, string>>x).a : [number, string]
>(<i01<number, string>>x) : i01<number, string>
><i01<number, string>>x : i01<number, string>
>i01 : i01<T, U>
>x : any
>a : [number, string]

interface i02<T extends number, U = T> { a: [T, U]; }
>i02 : i02<T, U>
>T : T
>U : U
>T : T
>a : [T, U]
>T : T
>U : U

const i02c00 = (<i02<number>>x).a;
>i02c00 : [number, number]
>(<i02<number>>x).a : [number, number]
>(<i02<number>>x) : i02<number, number>
><i02<number>>x : i02<number, number>
>i02 : i02<T, U>
>x : any
>a : [number, number]

const i02c01 = (<i02<1>>x).a;
>i02c01 : [1, 1]
>(<i02<1>>x).a : [1, 1]
>(<i02<1>>x) : i02<1, 1>
><i02<1>>x : i02<1, 1>
>i02 : i02<T, U>
>x : any
>a : [1, 1]

const i02c02 = (<i02<number, number>>x).a;
>i02c02 : [number, number]
>(<i02<number, number>>x).a : [number, number]
>(<i02<number, number>>x) : i02<number, number>
><i02<number, number>>x : i02<number, number>
>i02 : i02<T, U>
>x : any
>a : [number, number]

const i02c03 = (<i02<1, number>>x).a;
>i02c03 : [1, number]
>(<i02<1, number>>x).a : [1, number]
>(<i02<1, number>>x) : i02<1, number>
><i02<1, number>>x : i02<1, number>
>i02 : i02<T, U>
>x : any
>a : [1, number]

const i02c04 = (<i02<number, 1>>x).a;
>i02c04 : [number, 1]
>(<i02<number, 1>>x).a : [number, 1]
>(<i02<number, 1>>x) : i02<number, 1>
><i02<number, 1>>x : i02<number, 1>
>i02 : i02<T, U>
>x : any
>a : [number, 1]

interface i03<T extends number, U extends T = T> { a: [T, U]; }
>i03 : i03<T, U>
>T : T
>U : U
>T : T
>T : T
>a : [T, U]
>T : T
>U : U

const i03c00 = (<i03<number>>x).a;
>i03c00 : [number, number]
>(<i03<number>>x).a : [number, number]
>(<i03<number>>x) : i03<number, number>
><i03<number>>x : i03<number, number>
>i03 : i03<T, U>
>x : any
>a : [number, number]

const i03c01 = (<i03<1>>x).a;
>i03c01 : [1, 1]
>(<i03<1>>x).a : [1, 1]
>(<i03<1>>x) : i03<1, 1>
><i03<1>>x : i03<1, 1>
>i03 : i03<T, U>
>x : any
>a : [1, 1]

const i03c02 = (<i03<number, number>>x).a;
>i03c02 : [number, number]
>(<i03<number, number>>x).a : [number, number]
>(<i03<number, number>>x) : i03<number, number>
><i03<number, number>>x : i03<number, number>
>i03 : i03<T, U>
>x : any
>a : [number, number]

const i03c03 = (<i03<1, 1>>x).a;
>i03c03 : [1, 1]
>(<i03<1, 1>>x).a : [1, 1]
>(<i03<1, 1>>x) : i03<1, 1>
><i03<1, 1>>x : i03<1, 1>
>i03 : i03<T, U>
>x : any
>a : [1, 1]

const i03c04 = (<i03<number, 1>>x).a;
>i03c04 : [number, 1]
>(<i03<number, 1>>x).a : [number, 1]
>(<i03<number, 1>>x) : i03<number, 1>
><i03<number, 1>>x : i03<number, 1>
>i03 : i03<T, U>
>x : any
>a : [number, 1]

interface Base01<T> { a: T; }
>Base01 : Base01<T>
>T : T
>a : T
>T : T

interface Base01Constructor { new <T = number>(a?: T): Base01<T>; }
>Base01Constructor : Base01Constructor
>T : T
>a : T
>T : T
>Base01 : Base01<T>
>T : T

declare const Base01: Base01Constructor;
>Base01 : Base01Constructor
>Base01Constructor : Base01Constructor

const Base01c00 = new Base01();
>Base01c00 : Base01<number>
>new Base01() : Base01<number>
>Base01 : Base01Constructor

const Base01c01 = new Base01(1);
>Base01c01 : Base01<number>
>new Base01(1) : Base01<number>
>Base01 : Base01Constructor
>1 : 1

const Base01c02 = new Base01<number>();
>Base01c02 : Base01<number>
>new Base01<number>() : Base01<number>
>Base01 : Base01Constructor

const Base01c03 = new Base01<number>(1);
>Base01c03 : Base01<number>
>new Base01<number>(1) : Base01<number>
>Base01 : Base01Constructor
>1 : 1

declare class Derived01<T> extends Base01<T> { }
>Derived01 : Derived01<T>
>T : T
>Base01 : Base01<T>
>T : T

const Derived01c00 = new Derived01();
>Derived01c00 : Derived01<{}>
>new Derived01() : Derived01<{}>
>Derived01 : typeof Derived01

const Derived01c01 = new Derived01(1);
>Derived01c01 : Derived01<number>
>new Derived01(1) : Derived01<number>
>Derived01 : typeof Derived01
>1 : 1

const Derived01c02 = new Derived01<number>();
>Derived01c02 : Derived01<number>
>new Derived01<number>() : Derived01<number>
>Derived01 : typeof Derived01

const Derived01c03 = new Derived01<number>(1);
>Derived01c03 : Derived01<number>
>new Derived01<number>(1) : Derived01<number>
>Derived01 : typeof Derived01
>1 : 1

declare class Derived02<T = string> extends Base01<T> { }
>Derived02 : Derived02<T>
>T : T
>Base01 : Base01<T>
>T : T

const Derived02c00 = new Derived02();
>Derived02c00 : Derived02<string>
>new Derived02() : Derived02<string>
>Derived02 : typeof Derived02

const Derived02c01 = new Derived02(1);
>Derived02c01 : Derived02<number>
>new Derived02(1) : Derived02<number>
>Derived02 : typeof Derived02
>1 : 1

const Derived02c02 = new Derived02<number>();
>Derived02c02 : Derived02<number>
>new Derived02<number>() : Derived02<number>
>Derived02 : typeof Derived02

const Derived02c03 = new Derived02<number>(1);
>Derived02c03 : Derived02<number>
>new Derived02<number>(1) : Derived02<number>
>Derived02 : typeof Derived02
>1 : 1

