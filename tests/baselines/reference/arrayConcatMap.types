=== tests/cases/compiler/arrayConcatMap.ts ===
var x = [].concat([{ a: 1 }], [{ a: 2 }])
>x : any[]
>[].concat([{ a: 1 }], [{ a: 2 }])          .map(b => b.a) : any[]
>[].concat([{ a: 1 }], [{ a: 2 }])          .map : <U, V>(callbackfn: (this: V, value: any, index: number, array: any[]) => U, thisArg?: V) => U[]
>[].concat([{ a: 1 }], [{ a: 2 }]) : any[]
>[].concat : (...items: any[]) => any[]
>[] : undefined[]
>concat : (...items: any[]) => any[]
>[{ a: 1 }] : { a: number; }[]
>{ a: 1 } : { a: number; }
>a : number
>1 : number
>[{ a: 2 }] : { a: number; }[]
>{ a: 2 } : { a: number; }
>a : number
>2 : number

          .map(b => b.a);
>map : <U, V>(callbackfn: (this: V, value: any, index: number, array: any[]) => U, thisArg?: V) => U[]
>b => b.a : (b: any) => any
>b : any
>b.a : any
>b : any
>a : any

