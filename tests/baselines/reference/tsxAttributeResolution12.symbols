=== tests/cases/conformance/jsx/react.d.ts ===

declare module JSX {
>JSX : Symbol(JSX, Decl(react.d.ts, 0, 0))

	interface Element { }
>Element : Symbol(Element, Decl(react.d.ts, 1, 20))

	interface IntrinsicElements {
>IntrinsicElements : Symbol(IntrinsicElements, Decl(react.d.ts, 2, 22))
	}
	interface ElementAttributesProperty {
>ElementAttributesProperty : Symbol(ElementAttributesProperty, Decl(react.d.ts, 4, 2))

		props;
>props : Symbol(props, Decl(react.d.ts, 5, 38))
	}
	interface IntrinsicAttributes {
>IntrinsicAttributes : Symbol(IntrinsicAttributes, Decl(react.d.ts, 7, 2))

		ref?: string;
>ref : Symbol(ref, Decl(react.d.ts, 8, 32))
	}
}

=== tests/cases/conformance/jsx/file.tsx ===
declare module TestMod {
>TestMod : Symbol(TestMod, Decl(file.tsx, 0, 0))

	interface TestClass {
>TestClass : Symbol(TestClass, Decl(file.tsx, 0, 24))

		props: { reqd: any };
>props : Symbol(props, Decl(file.tsx, 1, 22))
>reqd : Symbol(reqd, Decl(file.tsx, 2, 10))
	}
	var Test: TestClass;
>Test : Symbol(Test, Decl(file.tsx, 4, 4))
>TestClass : Symbol(TestClass, Decl(file.tsx, 0, 24))
}

// Should error
var test = <TestMod.Test />
>test : Symbol(test, Decl(file.tsx, 8, 3))
>Test : Symbol(TestMod.TestClass, Decl(file.tsx, 0, 24))


