=== tests/cases/compiler/genericInheritedImplicitConstructors.ts ===
interface Constructor<T> {
>Constructor : Symbol(Constructor, Decl(genericInheritedImplicitConstructors.ts, 0, 0))
>T : Symbol(T, Decl(genericInheritedImplicitConstructors.ts, 0, 22))

    new(...args: any[]): T;
>args : Symbol(args, Decl(genericInheritedImplicitConstructors.ts, 1, 8))
>T : Symbol(T, Decl(genericInheritedImplicitConstructors.ts, 0, 22))

    prototype: T;
>prototype : Symbol(Constructor.prototype, Decl(genericInheritedImplicitConstructors.ts, 1, 27))
>T : Symbol(T, Decl(genericInheritedImplicitConstructors.ts, 0, 22))
}

class A<U> { a: U; }
>A : Symbol(A, Decl(genericInheritedImplicitConstructors.ts, 3, 1))
>U : Symbol(U, Decl(genericInheritedImplicitConstructors.ts, 5, 8))
>a : Symbol(A.a, Decl(genericInheritedImplicitConstructors.ts, 5, 12))
>U : Symbol(U, Decl(genericInheritedImplicitConstructors.ts, 5, 8))

class B<V> extends A<V> { b: V; }
>B : Symbol(B, Decl(genericInheritedImplicitConstructors.ts, 5, 20))
>V : Symbol(V, Decl(genericInheritedImplicitConstructors.ts, 6, 8))
>A : Symbol(A, Decl(genericInheritedImplicitConstructors.ts, 3, 1))
>V : Symbol(V, Decl(genericInheritedImplicitConstructors.ts, 6, 8))
>b : Symbol(B.b, Decl(genericInheritedImplicitConstructors.ts, 6, 25))
>V : Symbol(V, Decl(genericInheritedImplicitConstructors.ts, 6, 8))

var c:Constructor<B<boolean>> = B; // error here
>c : Symbol(c, Decl(genericInheritedImplicitConstructors.ts, 7, 3))
>Constructor : Symbol(Constructor, Decl(genericInheritedImplicitConstructors.ts, 0, 0))
>B : Symbol(B, Decl(genericInheritedImplicitConstructors.ts, 5, 20))
>B : Symbol(B, Decl(genericInheritedImplicitConstructors.ts, 5, 20))

//class A1 { a: boolean; }
//class B1 extends A1 { b: boolean; }
//var c1:Constructor<B1> = B1; // no error here

