=== tests/cases/conformance/types/literal/booleanLiteralTypes2.ts ===

type A1 = true | false;
>A1 : true | false
>true : true
>false : false

type A2 = false | true;
>A2 : false | true
>false : false
>true : true

function f1() {
>f1 : () => void

    var a: A1;
>a : true | false
>A1 : true | false

    var a: A2;
>a : true | false
>A2 : false | true

    var a: true | false;
>a : true | false
>true : true
>false : false

    var a: false | true;
>a : true | false
>false : false
>true : true
}

function f2(a: true | false, b: boolean) {
>f2 : (a: true | false, b: boolean) => void
>a : true | false
>true : true
>false : false
>b : boolean

    a = b;
>a = b : boolean
>a : true | false
>b : boolean

    b = a;
>b = a : true | false
>b : boolean
>a : true | false
}

function f3(a: true | false, b: true | false) {
>f3 : (a: true | false, b: true | false) => void
>a : true | false
>true : true
>false : false
>b : true | false
>true : true
>false : false

    var x = a || b;
>x : true | false
>a || b : true | false
>a : true | false
>b : true | false

    var x = a && b;
>x : true | false
>a && b : true | false
>a : true | false
>b : true | false

    var x = !a;
>x : true | false
>!a : true | false
>a : false | true
}

function f4(t: true, f: false) {
>f4 : (t: true, f: false) => void
>t : true
>true : true
>f : false
>false : false

    var x1 = t && f;
>x1 : false
>t && f : false
>t : true
>f : false

    var x2 = f && t;
>x2 : false
>f && t : false
>f : false
>t : true

    var x3 = t || f;
>x3 : true
>t || f : true
>t : true
>f : false

    var x4 = f || t;
>x4 : true
>f || t : true
>f : false
>t : true

    var x5 = !t;
>x5 : false
>!t : false
>t : true

    var x6 = !f;
>x6 : true
>!f : true
>f : false
}

declare function g(x: true): string;
>g : { (x: true): string; (x: false): boolean; (x: boolean): number; }
>x : true
>true : true

declare function g(x: false): boolean;
>g : { (x: true): string; (x: false): boolean; (x: boolean): number; }
>x : false
>false : false

declare function g(x: boolean): number;
>g : { (x: true): string; (x: false): boolean; (x: boolean): number; }
>x : boolean

function f5(b: boolean) {
>f5 : (b: boolean) => void
>b : boolean

    var z1 = g(true);
>z1 : string
>g(true) : string
>g : { (x: true): string; (x: false): boolean; (x: boolean): number; }
>true : true

    var z2 = g(false);
>z2 : boolean
>g(false) : boolean
>g : { (x: true): string; (x: false): boolean; (x: boolean): number; }
>false : false

    var z3 = g(b);
>z3 : number
>g(b) : number
>g : { (x: true): string; (x: false): boolean; (x: boolean): number; }
>b : boolean
}

function assertNever(x: never): never {
>assertNever : (x: never) => never
>x : never

    throw new Error("Unexpected value");
>new Error("Unexpected value") : Error
>Error : ErrorConstructor
>"Unexpected value" : string
}

function f10(x: true | false) {
>f10 : (x: true | false) => string
>x : true | false
>true : true
>false : false

    switch (x) {
>x : true | false

        case true: return "true";
>true : true
>"true" : string

        case false: return "false";
>false : false
>"false" : string
    }
}

function f11(x: true | false) {
>f11 : (x: true | false) => string
>x : true | false
>true : true
>false : false

    switch (x) {
>x : true | false

        case true: return "true";
>true : true
>"true" : string

        case false: return "false";
>false : false
>"false" : string
    }
    return assertNever(x);
>assertNever(x) : never
>assertNever : (x: never) => never
>x : never
}

function f12(x: true | false) {
>f12 : (x: true | false) => void
>x : true | false
>true : true
>false : false

    if (x) {
>x : true | false

        x;
>x : true
    }
    else {
        x;
>x : false
    }
}

function f13(x: true | false) {
>f13 : (x: true | false) => void
>x : true | false
>true : true
>false : false

    if (x === true) {
>x === true : boolean
>x : true | false
>true : true

        x;
>x : true
    }
    else {
        x;
>x : false
    }
}

type Item =
>Item : { kind: true; a: string; } | { kind: false; b: string; }

    { kind: true, a: string } |
>kind : true
>true : true
>a : string

    { kind: false, b: string };
>kind : false
>false : false
>b : string

function f20(x: Item) {
>f20 : (x: { kind: true; a: string; } | { kind: false; b: string; }) => string
>x : { kind: true; a: string; } | { kind: false; b: string; }
>Item : { kind: true; a: string; } | { kind: false; b: string; }

    switch (x.kind) {
>x.kind : true | false
>x : { kind: true; a: string; } | { kind: false; b: string; }
>kind : true | false

        case true: return x.a;
>true : true
>x.a : string
>x : { kind: true; a: string; }
>a : string

        case false: return x.b;
>false : false
>x.b : string
>x : { kind: false; b: string; }
>b : string
    }
}

function f21(x: Item) {
>f21 : (x: { kind: true; a: string; } | { kind: false; b: string; }) => string
>x : { kind: true; a: string; } | { kind: false; b: string; }
>Item : { kind: true; a: string; } | { kind: false; b: string; }

    switch (x.kind) {
>x.kind : true | false
>x : { kind: true; a: string; } | { kind: false; b: string; }
>kind : true | false

        case true: return x.a;
>true : true
>x.a : string
>x : { kind: true; a: string; }
>a : string

        case false: return x.b;
>false : false
>x.b : string
>x : { kind: false; b: string; }
>b : string
    }
    return assertNever(x);
>assertNever(x) : never
>assertNever : (x: never) => never
>x : never
}
