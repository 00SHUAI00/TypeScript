=== tests/cases/conformance/salsa/input.js ===

function C() {
>C : () => void

    this.m = null;
>this.m = null : null
>this.m : any
>this : any
>m : any
>null : null
}
C.prototype.m = function() {
>C.prototype.m = function() {    this.nothing();} : () => void
>C.prototype.m : any
>C.prototype : any
>C : () => void
>prototype : any
>m : any
>function() {    this.nothing();} : () => void

    this.nothing();
>this.nothing() : any
>this.nothing : any
>this : { m: () => void; }
>nothing : any
}

class X {
>X : X

    constructor() {
        this.m = this.m.bind(this);
>this.m = this.m.bind(this) : any
>this.m : () => void
>this : this
>m : () => void
>this.m.bind(this) : any
>this.m.bind : (this: Function, thisArg: any, ...argArray: any[]) => any
>this.m : () => void
>this : this
>m : () => void
>bind : (this: Function, thisArg: any, ...argArray: any[]) => any
>this : this

        this.mistake = 'frankly, complete nonsense';
>this.mistake = 'frankly, complete nonsense' : string
>this.mistake : () => void
>this : this
>mistake : () => void
>'frankly, complete nonsense' : string
    }
    m() {
>m : () => void
    }
    mistake() {
>mistake : () => void
    }
}
let x = new X();
>x : X
>new X() : X
>X : typeof X

X.prototype.mistake = false;
>X.prototype.mistake = false : boolean
>X.prototype.mistake : () => void
>X.prototype : X
>X : typeof X
>prototype : X
>mistake : () => void
>false : boolean

x.m();
>x.m() : void
>x.m : () => void
>x : X
>m : () => void

x.mistake;
>x.mistake : () => void
>x : X
>mistake : () => void

