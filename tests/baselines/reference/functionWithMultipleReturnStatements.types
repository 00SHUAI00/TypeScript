=== tests/cases/conformance/types/typeRelationships/bestCommonType/functionWithMultipleReturnStatements.ts ===

// return type of a function with multiple returns is the BCT of each return statement
// it is an error if there is no single BCT, these are error cases

function f1() {
>f1 : () => string | number

    if (true) {
>true : boolean

        return 1;
>1 : number

    } else {
        return '';
>'' : string
    }
}

function f2() {
>f2 : () => string | number

    if (true) {
>true : boolean

        return 1;
>1 : number

    } else if (false) {
>false : boolean

        return 2;
>2 : number

    } else {
        return '';
>'' : string
    }
}

function f3() {
>f3 : () => string | number

    try {
        return 1;
>1 : number
    }
    catch (e) {
>e : any

        return '';
>'' : string
    }
}

function f4() {
>f4 : () => string | number

    try {
        return 1;
>1 : number
    }
    catch (e) {
>e : any

    }
    finally {
        return '';
>'' : string
    }
}

function f5() {
>f5 : () => string | number

    return 1;
>1 : number

    return '';
>'' : string
}

function f6<T, U>(x: T, y:U) {
>f6 : <T, U>(x: T, y: U) => T | U
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U

    if (true) {
>true : boolean

        return x;
>x : T

    } else {
        return y;
>y : U
    }
}

function f8<T extends U, U extends V, V>(x: T, y: U) {
>f8 : <T extends U, U extends V, V>(x: T, y: U) => U
>T : T
>U : U
>U : U
>V : V
>V : V
>x : T
>T : T
>y : U
>U : U

    if (true) {
>true : boolean

        return x;
>x : T

    } else {
        return y;
>y : U
    }
}

