=== tests/cases/conformance/types/literal/enumLiteralTypes1.ts ===
const enum Choice { Unknown, Yes, No };
>Choice : Choice
>Unknown : Choice
>Yes : Choice
>No : Choice

type YesNo = Choice.Yes | Choice.No;
>YesNo : Choice.Yes | Choice.No
>Choice : any
>Yes : Choice.Yes
>Choice : any
>No : Choice.No

type NoYes = Choice.No | Choice.Yes;
>NoYes : Choice.Yes | Choice.No
>Choice : any
>No : Choice.No
>Choice : any
>Yes : Choice.Yes

type UnknownYesNo = Choice.Unknown | Choice.Yes | Choice.No;
>UnknownYesNo : Choice.Yes | Choice.No | Choice.Unknown
>Choice : any
>Unknown : Choice.Unknown
>Choice : any
>Yes : Choice.Yes
>Choice : any
>No : Choice.No

function f1() {
>f1 : () => void

    var a: YesNo;
>a : Choice.Yes | Choice.No
>YesNo : Choice.Yes | Choice.No

    var a: NoYes;
>a : Choice.Yes | Choice.No
>NoYes : Choice.Yes | Choice.No

    var a: Choice.Yes | Choice.No;
>a : Choice.Yes | Choice.No
>Choice : any
>Yes : Choice.Yes
>Choice : any
>No : Choice.No

    var a: Choice.No | Choice.Yes;
>a : Choice.Yes | Choice.No
>Choice : any
>No : Choice.No
>Choice : any
>Yes : Choice.Yes
}

function f2(a: YesNo, b: UnknownYesNo, c: Choice) {
>f2 : (a: Choice.Yes | Choice.No, b: Choice.Yes | Choice.No | Choice.Unknown, c: Choice) => void
>a : Choice.Yes | Choice.No
>YesNo : Choice.Yes | Choice.No
>b : Choice.Yes | Choice.No | Choice.Unknown
>UnknownYesNo : Choice.Yes | Choice.No | Choice.Unknown
>c : Choice
>Choice : Choice

    b = a;
>b = a : Choice.Yes | Choice.No
>b : Choice.Yes | Choice.No | Choice.Unknown
>a : Choice.Yes | Choice.No

    c = a;
>c = a : Choice.Yes | Choice.No
>c : Choice
>a : Choice.Yes | Choice.No

    c = b;
>c = b : Choice.Yes | Choice.No
>c : Choice
>b : Choice.Yes | Choice.No
}

function f3(a: Choice.Yes, b: YesNo) {
>f3 : (a: Choice.Yes, b: Choice.Yes | Choice.No) => void
>a : Choice.Yes
>Choice : any
>Yes : Choice.Yes
>b : Choice.Yes | Choice.No
>YesNo : Choice.Yes | Choice.No

    var x = a + b;
>x : number
>a + b : number
>a : Choice.Yes
>b : Choice.Yes | Choice.No

    var x = a - b;
>x : number
>a - b : number
>a : Choice.Yes
>b : Choice.Yes | Choice.No

    var x = a * b;
>x : number
>a * b : number
>a : Choice.Yes
>b : Choice.Yes | Choice.No

    var x = a / b;
>x : number
>a / b : number
>a : Choice.Yes
>b : Choice.Yes | Choice.No

    var x = a % b;
>x : number
>a % b : number
>a : Choice.Yes
>b : Choice.Yes | Choice.No

    var x = a | b;
>x : number
>a | b : number
>a : Choice.Yes
>b : Choice.Yes | Choice.No

    var x = a & b;
>x : number
>a & b : number
>a : Choice.Yes
>b : Choice.Yes | Choice.No

    var x = a ^ b;
>x : number
>a ^ b : number
>a : Choice.Yes
>b : Choice.Yes | Choice.No

    var x = -b;
>x : number
>-b : number
>b : Choice.Yes | Choice.No

    var x = ~b;
>x : number
>~b : number
>b : Choice.Yes | Choice.No

    var y = a == b;
>y : boolean
>a == b : boolean
>a : Choice.Yes
>b : Choice.Yes | Choice.No

    var y = a != b;
>y : boolean
>a != b : boolean
>a : Choice.Yes
>b : Choice.Yes | Choice.No

    var y = a === b;
>y : boolean
>a === b : boolean
>a : Choice.Yes
>b : Choice.Yes | Choice.No

    var y = a !== b;
>y : boolean
>a !== b : boolean
>a : Choice.Yes
>b : Choice.Yes | Choice.No

    var y = a > b;
>y : boolean
>a > b : boolean
>a : Choice.Yes
>b : Choice.Yes | Choice.No

    var y = a < b;
>y : boolean
>a < b : boolean
>a : Choice.Yes
>b : Choice.Yes | Choice.No

    var y = a >= b;
>y : boolean
>a >= b : boolean
>a : Choice.Yes
>b : Choice.Yes | Choice.No

    var y = a <= b;
>y : boolean
>a <= b : boolean
>a : Choice.Yes
>b : Choice.Yes | Choice.No

    var y = !b;
>y : boolean
>!b : boolean
>b : Choice.Yes | Choice.No
}

function f4(a: Choice.Yes, b: YesNo) {
>f4 : (a: Choice.Yes, b: Choice.Yes | Choice.No) => void
>a : Choice.Yes
>Choice : any
>Yes : Choice.Yes
>b : Choice.Yes | Choice.No
>YesNo : Choice.Yes | Choice.No

    a++;
>a++ : number
>a : Choice.Yes

    b++;
>b++ : number
>b : Choice.Yes | Choice.No
}

declare function g(x: Choice.Yes): string;
>g : { (x: Choice.Yes): string; (x: Choice.No): boolean; (x: Choice): number; }
>x : Choice.Yes
>Choice : any
>Yes : Choice.Yes

declare function g(x: Choice.No): boolean;
>g : { (x: Choice.Yes): string; (x: Choice.No): boolean; (x: Choice): number; }
>x : Choice.No
>Choice : any
>No : Choice.No

declare function g(x: Choice): number;
>g : { (x: Choice.Yes): string; (x: Choice.No): boolean; (x: Choice): number; }
>x : Choice
>Choice : Choice

function f5(a: YesNo, b: UnknownYesNo, c: Choice) {
>f5 : (a: Choice.Yes | Choice.No, b: Choice.Yes | Choice.No | Choice.Unknown, c: Choice) => void
>a : Choice.Yes | Choice.No
>YesNo : Choice.Yes | Choice.No
>b : Choice.Yes | Choice.No | Choice.Unknown
>UnknownYesNo : Choice.Yes | Choice.No | Choice.Unknown
>c : Choice
>Choice : Choice

    var z1 = g(Choice.Yes);
>z1 : string
>g(Choice.Yes) : string
>g : { (x: Choice.Yes): string; (x: Choice.No): boolean; (x: Choice): number; }
>Choice.Yes : Choice.Yes
>Choice : typeof Choice
>Yes : Choice.Yes

    var z2 = g(Choice.No);
>z2 : boolean
>g(Choice.No) : boolean
>g : { (x: Choice.Yes): string; (x: Choice.No): boolean; (x: Choice): number; }
>Choice.No : Choice.No
>Choice : typeof Choice
>No : Choice.No

    var z3 = g(a);
>z3 : number
>g(a) : number
>g : { (x: Choice.Yes): string; (x: Choice.No): boolean; (x: Choice): number; }
>a : Choice.Yes | Choice.No

    var z4 = g(b);
>z4 : number
>g(b) : number
>g : { (x: Choice.Yes): string; (x: Choice.No): boolean; (x: Choice): number; }
>b : Choice.Yes | Choice.No | Choice.Unknown

    var z5 = g(c);
>z5 : number
>g(c) : number
>g : { (x: Choice.Yes): string; (x: Choice.No): boolean; (x: Choice): number; }
>c : Choice
}

function assertNever(x: never): never {
>assertNever : (x: never) => never
>x : never

    throw new Error("Unexpected value");
>new Error("Unexpected value") : Error
>Error : ErrorConstructor
>"Unexpected value" : string
}

function f10(x: YesNo) {
>f10 : (x: Choice.Yes | Choice.No) => string
>x : Choice.Yes | Choice.No
>YesNo : Choice.Yes | Choice.No

    switch (x) {
>x : Choice.Yes | Choice.No

        case Choice.Yes: return "true";
>Choice.Yes : Choice.Yes
>Choice : typeof Choice
>Yes : Choice.Yes
>"true" : string

        case Choice.No: return "false";
>Choice.No : Choice.No
>Choice : typeof Choice
>No : Choice.No
>"false" : string
    }
}

function f11(x: YesNo) {
>f11 : (x: Choice.Yes | Choice.No) => string
>x : Choice.Yes | Choice.No
>YesNo : Choice.Yes | Choice.No

    switch (x) {
>x : Choice.Yes | Choice.No

        case Choice.Yes: return "true";
>Choice.Yes : Choice.Yes
>Choice : typeof Choice
>Yes : Choice.Yes
>"true" : string

        case Choice.No: return "false";
>Choice.No : Choice.No
>Choice : typeof Choice
>No : Choice.No
>"false" : string
    }
    return assertNever(x);
>assertNever(x) : never
>assertNever : (x: never) => never
>x : never
}

function f12(x: UnknownYesNo) {
>f12 : (x: Choice.Yes | Choice.No | Choice.Unknown) => void
>x : Choice.Yes | Choice.No | Choice.Unknown
>UnknownYesNo : Choice.Yes | Choice.No | Choice.Unknown

    if (x) {
>x : Choice.Yes | Choice.No | Choice.Unknown

        x;
>x : Choice.Yes | Choice.No
    }
    else {
        x;
>x : Choice.Yes | Choice.No | Choice.Unknown
    }
}

function f13(x: UnknownYesNo) {
>f13 : (x: Choice.Yes | Choice.No | Choice.Unknown) => void
>x : Choice.Yes | Choice.No | Choice.Unknown
>UnknownYesNo : Choice.Yes | Choice.No | Choice.Unknown

    if (x === Choice.Yes) {
>x === Choice.Yes : boolean
>x : Choice.Yes | Choice.No | Choice.Unknown
>Choice.Yes : Choice.Yes
>Choice : typeof Choice
>Yes : Choice.Yes

        x;
>x : Choice.Yes
    }
    else {
        x;
>x : Choice.No | Choice.Unknown
    }
}

type Item =
>Item : { kind: Choice.Yes; a: string; } | { kind: Choice.No; b: string; }

    { kind: Choice.Yes, a: string } |
>kind : Choice.Yes
>Choice : any
>Yes : Choice.Yes
>a : string

    { kind: Choice.No, b: string };
>kind : Choice.No
>Choice : any
>No : Choice.No
>b : string

function f20(x: Item) {
>f20 : (x: { kind: Choice.Yes; a: string; } | { kind: Choice.No; b: string; }) => string
>x : { kind: Choice.Yes; a: string; } | { kind: Choice.No; b: string; }
>Item : { kind: Choice.Yes; a: string; } | { kind: Choice.No; b: string; }

    switch (x.kind) {
>x.kind : Choice.Yes | Choice.No
>x : { kind: Choice.Yes; a: string; } | { kind: Choice.No; b: string; }
>kind : Choice.Yes | Choice.No

        case Choice.Yes: return x.a;
>Choice.Yes : Choice.Yes
>Choice : typeof Choice
>Yes : Choice.Yes
>x.a : string
>x : { kind: Choice.Yes; a: string; }
>a : string

        case Choice.No: return x.b;
>Choice.No : Choice.No
>Choice : typeof Choice
>No : Choice.No
>x.b : string
>x : { kind: Choice.No; b: string; }
>b : string
    }
}

function f21(x: Item) {
>f21 : (x: { kind: Choice.Yes; a: string; } | { kind: Choice.No; b: string; }) => string
>x : { kind: Choice.Yes; a: string; } | { kind: Choice.No; b: string; }
>Item : { kind: Choice.Yes; a: string; } | { kind: Choice.No; b: string; }

    switch (x.kind) {
>x.kind : Choice.Yes | Choice.No
>x : { kind: Choice.Yes; a: string; } | { kind: Choice.No; b: string; }
>kind : Choice.Yes | Choice.No

        case Choice.Yes: return x.a;
>Choice.Yes : Choice.Yes
>Choice : typeof Choice
>Yes : Choice.Yes
>x.a : string
>x : { kind: Choice.Yes; a: string; }
>a : string

        case Choice.No: return x.b;
>Choice.No : Choice.No
>Choice : typeof Choice
>No : Choice.No
>x.b : string
>x : { kind: Choice.No; b: string; }
>b : string
    }
    return assertNever(x);
>assertNever(x) : never
>assertNever : (x: never) => never
>x : never
}
