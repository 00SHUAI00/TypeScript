=== tests/cases/conformance/expressions/contextualTyping/implementedPropertyContextualTyping1.ts ===
interface Event {
>Event : Event

	time: number
>time : number
}
interface Base {
>Base : Base

	superHandle: (e: Event) => number;
>superHandle : (e: Event) => number
>e : Event
>Event : Event
}
interface Listener extends Base {
>Listener : Listener
>Base : Base

	handle: (e: Event) => void;
>handle : (e: Event) => void
>e : Event
>Event : Event
}
interface Ringer {
>Ringer : Ringer

	ring: (times: number) => void;
>ring : (times: number) => void
>times : number
}

class Alarm implements Listener, Ringer {
>Alarm : Alarm
>Listener : Listener
>Ringer : Ringer

	handle = e => { 
>handle : (e: Event) => void
>e => { 		let n: number = e.time;	} : (e: Event) => void
>e : Event

		let n: number = e.time;
>n : number
>e.time : number
>e : Event
>time : number
	}
	superHandle = e => {
>superHandle : (e: Event) => number
>e => {		return e.time;	} : (e: Event) => number
>e : Event

		return e.time;
>e.time : number
>e : Event
>time : number
	}
	ring = times => {
>ring : (times: number) => void
>times => {		let m: number = times + 1;	} : (times: number) => void
>times : number

		let m: number = times + 1;
>m : number
>times + 1 : number
>times : number
>1 : number
	}
}
