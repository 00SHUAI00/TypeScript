=== tests/cases/compiler/defaultParameterAddsUndefinedWithStrictNullChecks.ts ===
function f(addUndefined1 = "J", addUndefined2?: number) {
>f : (addUndefined1?: string | undefined, addUndefined2?: number | undefined) => number
>addUndefined1 : string | undefined
>"J" : "J"
>addUndefined2 : number | undefined

    return addUndefined1.length + (addUndefined2 || 0);
>addUndefined1.length + (addUndefined2 || 0) : number
>addUndefined1.length : number
>addUndefined1 : string
>length : number
>(addUndefined2 || 0) : number
>addUndefined2 || 0 : number
>addUndefined2 : number | undefined
>0 : 0
}
function g(addUndefined = "J", addDefined: number) {
>g : (addUndefined: string | undefined, addDefined: number) => number
>addUndefined : string | undefined
>"J" : "J"
>addDefined : number

    return addUndefined.length + addDefined;
>addUndefined.length + addDefined : number
>addUndefined.length : number
>addUndefined : string
>length : number
>addDefined : number
}
let total = f() + f('a', 1) + f('b') + f(undefined, 2);
>total : number
>f() + f('a', 1) + f('b') + f(undefined, 2) : number
>f() + f('a', 1) + f('b') : number
>f() + f('a', 1) : number
>f() : number
>f : (addUndefined1?: string | undefined, addUndefined2?: number | undefined) => number
>f('a', 1) : number
>f : (addUndefined1?: string | undefined, addUndefined2?: number | undefined) => number
>'a' : "a"
>1 : 1
>f('b') : number
>f : (addUndefined1?: string | undefined, addUndefined2?: number | undefined) => number
>'b' : "b"
>f(undefined, 2) : number
>f : (addUndefined1?: string | undefined, addUndefined2?: number | undefined) => number
>undefined : undefined
>2 : 2

total = g('c', 3) + g(undefined, 4);
>total = g('c', 3) + g(undefined, 4) : number
>total : number
>g('c', 3) + g(undefined, 4) : number
>g('c', 3) : number
>g : (addUndefined: string | undefined, addDefined: number) => number
>'c' : "c"
>3 : 3
>g(undefined, 4) : number
>g : (addUndefined: string | undefined, addDefined: number) => number
>undefined : undefined
>4 : 4

function foo1(x: string = "string", b: number) {
>foo1 : (x: string | undefined, b: number) => void
>x : string | undefined
>"string" : "string"
>b : number

    x.length;
>x.length : number
>x : string
>length : number
}

function foo2(x: string | undefined = "string", b: number) {
>foo2 : (x: string | undefined, b: number) => void
>x : string | undefined
>"string" : "string"
>b : number

    x.length; // ok, should be narrowed to string
>x.length : number
>x : string
>length : number
}

function foo3(x = "string", b: number) {
>foo3 : (x: string | undefined, b: number) => void
>x : string | undefined
>"string" : "string"
>b : number

    x.length; // ok, should be narrowed to string
>x.length : number
>x : string
>length : number
}

foo1(undefined, 1);
>foo1(undefined, 1) : void
>foo1 : (x: string | undefined, b: number) => void
>undefined : undefined
>1 : 1

foo2(undefined, 1);
>foo2(undefined, 1) : void
>foo2 : (x: string | undefined, b: number) => void
>undefined : undefined
>1 : 1

foo3(undefined, 1);
>foo3(undefined, 1) : void
>foo3 : (x: string | undefined, b: number) => void
>undefined : undefined
>1 : 1


// .d.ts should have `T | undefined` for all of them
// need to remove special-case code to allow calling foo1(undefined) for x: string = "string"

