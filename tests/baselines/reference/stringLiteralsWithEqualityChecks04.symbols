=== tests/cases/conformance/types/stringLiteral/stringLiteralsWithEqualityChecks04.ts ===
interface Runnable {
>Runnable : Symbol(Runnable, Decl(stringLiteralsWithEqualityChecks04.ts, 0, 0))

    isRunning: boolean;
>isRunning : Symbol(isRunning, Decl(stringLiteralsWithEqualityChecks04.ts, 0, 20))
}

interface Refrigerator {
>Refrigerator : Symbol(Refrigerator, Decl(stringLiteralsWithEqualityChecks04.ts, 2, 1))

    makesFoodGoBrrr: boolean;
>makesFoodGoBrrr : Symbol(makesFoodGoBrrr, Decl(stringLiteralsWithEqualityChecks04.ts, 4, 24))
}

let x: string;
>x : Symbol(x, Decl(stringLiteralsWithEqualityChecks04.ts, 8, 3))

let y: "foo" | Refrigerator;
>y : Symbol(y, Decl(stringLiteralsWithEqualityChecks04.ts, 9, 3))
>Refrigerator : Symbol(Refrigerator, Decl(stringLiteralsWithEqualityChecks04.ts, 2, 1))

let b: boolean;
>b : Symbol(b, Decl(stringLiteralsWithEqualityChecks04.ts, 11, 3))

b = x == y;
>b : Symbol(b, Decl(stringLiteralsWithEqualityChecks04.ts, 11, 3))
>x : Symbol(x, Decl(stringLiteralsWithEqualityChecks04.ts, 8, 3))
>y : Symbol(y, Decl(stringLiteralsWithEqualityChecks04.ts, 9, 3))

b = "foo" == y
>b : Symbol(b, Decl(stringLiteralsWithEqualityChecks04.ts, 11, 3))
>y : Symbol(y, Decl(stringLiteralsWithEqualityChecks04.ts, 9, 3))

b = y == "foo";
>b : Symbol(b, Decl(stringLiteralsWithEqualityChecks04.ts, 11, 3))
>y : Symbol(y, Decl(stringLiteralsWithEqualityChecks04.ts, 9, 3))

b = "foo" == "bar";
>b : Symbol(b, Decl(stringLiteralsWithEqualityChecks04.ts, 11, 3))

b = x != y;
>b : Symbol(b, Decl(stringLiteralsWithEqualityChecks04.ts, 11, 3))
>x : Symbol(x, Decl(stringLiteralsWithEqualityChecks04.ts, 8, 3))
>y : Symbol(y, Decl(stringLiteralsWithEqualityChecks04.ts, 9, 3))

b = "foo" != y
>b : Symbol(b, Decl(stringLiteralsWithEqualityChecks04.ts, 11, 3))
>y : Symbol(y, Decl(stringLiteralsWithEqualityChecks04.ts, 9, 3))

b = y != "foo";
>b : Symbol(b, Decl(stringLiteralsWithEqualityChecks04.ts, 11, 3))
>y : Symbol(y, Decl(stringLiteralsWithEqualityChecks04.ts, 9, 3))

b = "foo" != "bar";
>b : Symbol(b, Decl(stringLiteralsWithEqualityChecks04.ts, 11, 3))


