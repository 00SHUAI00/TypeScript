=== tests/cases/conformance/es7/exponentiationOperator/emitExponentiationOperatorInTemplateString1.ts ===
var t1 = 10;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

var t2 = 10;
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))

var s;
>s : Symbol(s, Decl(emitExponentiationOperatorInTemplateString1.ts, 2, 3))

`Exp: ${t1 ** t2} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))

`Exp: ${t1 ** t2 ** t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${t1 + t2 ** t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${t1 - t2 ** t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${t1 ** t2 + t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${t1 ** t2 - t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${t1 + t2 ** t2 + t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${t1 - t2 ** t2 - t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${-t1 ** t2 - t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${+t1 ** t2 - t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${-++t1 ** t2 - t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${+--t1 ** t2 - t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${-t1++ ** t2 - t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${-t1-- ** t2 - t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${+t1++ ** t2 - t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${+t1-- ** t2 - t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${typeof t1 ** t2 ** t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${typeof t1 ** t2 + t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${typeof t1 ** (t2 - t1)} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${1 + typeof t1 ** t2 ** t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${2 + typeof t1 ** t2 ** ++t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${3 + typeof t1 ** t2 ** --t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${!t1 ** t2 ** t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${!t1 ** t2 ** ++t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

`Exp: ${!t1 ** t2 ** --t1} abc`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTemplateString1.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTemplateString1.ts, 0, 3))

