=== tests/cases/conformance/types/typeRelationships/bestCommonType/functionWithMultipleReturnStatements2.ts ===

// return type of a function with multiple returns is the BCT of each return statement
// no errors expected here

function f1() {
>f1 : () => number

    if (true) {
>true : boolean

        return 1;
>1 : number

    } else {
        return null;
>null : null
    }
}

function f2() {
>f2 : () => number

    if (true) {
>true : boolean

        return 1;
>1 : number

    } else if (false) {
>false : boolean

        return null;
>null : null

    } else {
        return 2;
>2 : number
    }
}

function f4() {
>f4 : () => number

    try {
        return 1;
>1 : number
    }
    catch (e) {
>e : any

        return undefined;
>undefined : undefined
    }
    finally {
        return 1;
>1 : number
    }
}

function f5() {
>f5 : () => Object

    return 1;
>1 : number

    return new Object();
>new Object() : Object
>Object : ObjectConstructor
}

function f6<T>(x: T) {
>f6 : <T>(x: T) => T
>T : T
>x : T
>T : T

    if (true) {
>true : boolean

        return x;
>x : T

    } else {
        return null;
>null : null
    }
}

//function f7<T extends U, U>(x: T, y: U) {
//    if (true) {
//        return x;
//    } else {
//        return y;
//    }
//}

var a: { x: number; y?: number };
>a : { x: number; y?: number; }
>x : number
>y : number

var b: { x: number; z?: number };
>b : { x: number; z?: number; }
>x : number
>z : number

// returns typeof a
function f9() {
>f9 : () => { x: number; y?: number; } | { x: number; z?: number; }

    if (true) {
>true : boolean

        return a;
>a : { x: number; y?: number; }

    } else {
        return b;
>b : { x: number; z?: number; }
    }
}

// returns typeof b
function f10() {
>f10 : () => { x: number; y?: number; } | { x: number; z?: number; }

    if (true) {
>true : boolean

        return b;
>b : { x: number; z?: number; }

    } else {
        return a;
>a : { x: number; y?: number; }
    }
}

// returns number => void
function f11() {
>f11 : () => (x: number) => void

    if (true) {
>true : boolean

        return (x: number) => { }
>(x: number) => { } : (x: number) => void
>x : number

    } else {
        return (x: Object) => { }
>(x: Object) => { } : (x: Object) => void
>x : Object
>Object : Object
    }
}

// returns Object => void
function f12() {
>f12 : () => (x: Object) => void

    if (true) {
>true : boolean

        return (x: Object) => { }
>(x: Object) => { } : (x: Object) => void
>x : Object
>Object : Object

    } else {
        return (x: number) => { }        
>(x: number) => { } : (x: number) => void
>x : number
    }
}
