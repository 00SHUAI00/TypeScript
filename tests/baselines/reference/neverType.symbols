=== tests/cases/conformance/types/never/neverType.ts ===

function error(message: string) {
>error : Symbol(error, Decl(neverType.ts, 0, 0))
>message : Symbol(message, Decl(neverType.ts, 1, 15))

    throw new Error(message);
>Error : Symbol(Error, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>message : Symbol(message, Decl(neverType.ts, 1, 15))
}

function fail() {
>fail : Symbol(fail, Decl(neverType.ts, 3, 1))

    return error("Something failed");
>error : Symbol(error, Decl(neverType.ts, 0, 0))
}

function infiniteLoop() {
>infiniteLoop : Symbol(infiniteLoop, Decl(neverType.ts, 7, 1))

    while (true) {
    }
}

function move1(direction: "up" | "down") {
>move1 : Symbol(move1, Decl(neverType.ts, 12, 1))
>direction : Symbol(direction, Decl(neverType.ts, 14, 15))

    switch (direction) {
>direction : Symbol(direction, Decl(neverType.ts, 14, 15))

        case "up":
            return 1;
        case "down":
            return -1; 
    }
    return error("Should never get here");
>error : Symbol(error, Decl(neverType.ts, 0, 0))
}

function move2(direction: "up" | "down") {
>move2 : Symbol(move2, Decl(neverType.ts, 22, 1))
>direction : Symbol(direction, Decl(neverType.ts, 24, 15))

    return direction === "up" ? 1 :
>direction : Symbol(direction, Decl(neverType.ts, 24, 15))

        direction === "down" ? -1 :
>direction : Symbol(direction, Decl(neverType.ts, 24, 15))

        error("Should never get here");
>error : Symbol(error, Decl(neverType.ts, 0, 0))
}

function check<T>(x: T | undefined) {
>check : Symbol(check, Decl(neverType.ts, 28, 1))
>T : Symbol(T, Decl(neverType.ts, 30, 15))
>x : Symbol(x, Decl(neverType.ts, 30, 18))
>T : Symbol(T, Decl(neverType.ts, 30, 15))

    return x || error("Undefined value");
>x : Symbol(x, Decl(neverType.ts, 30, 18))
>error : Symbol(error, Decl(neverType.ts, 0, 0))
}

function f1(x: string | number) {
>f1 : Symbol(f1, Decl(neverType.ts, 32, 1))
>x : Symbol(x, Decl(neverType.ts, 34, 12))

    if (typeof x === "boolean") {
>x : Symbol(x, Decl(neverType.ts, 34, 12))

        x;  // never
>x : Symbol(x, Decl(neverType.ts, 34, 12))
    }
}

function f2(x: string | number) {
>f2 : Symbol(f2, Decl(neverType.ts, 38, 1))
>x : Symbol(x, Decl(neverType.ts, 40, 12))

    while (true) {
        if (typeof x === "boolean") {
>x : Symbol(x, Decl(neverType.ts, 40, 12))

            return x;  // never
>x : Symbol(x, Decl(neverType.ts, 40, 12))
        }
    }
}

function failOrThrow(shouldFail: boolean) {
>failOrThrow : Symbol(failOrThrow, Decl(neverType.ts, 46, 1))
>shouldFail : Symbol(shouldFail, Decl(neverType.ts, 48, 21))

    if (shouldFail) {
>shouldFail : Symbol(shouldFail, Decl(neverType.ts, 48, 21))

        return fail();
>fail : Symbol(fail, Decl(neverType.ts, 3, 1))
    }
    throw new Error();
>Error : Symbol(Error, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
}

function test(cb: () => string) {
>test : Symbol(test, Decl(neverType.ts, 53, 1))
>cb : Symbol(cb, Decl(neverType.ts, 55, 14))

    let s = cb();
>s : Symbol(s, Decl(neverType.ts, 56, 7))
>cb : Symbol(cb, Decl(neverType.ts, 55, 14))

    return s;
>s : Symbol(s, Decl(neverType.ts, 56, 7))
}

let errorCallback = () => error("Error callback");
>errorCallback : Symbol(errorCallback, Decl(neverType.ts, 60, 3))
>error : Symbol(error, Decl(neverType.ts, 0, 0))

test(() => "hello");
>test : Symbol(test, Decl(neverType.ts, 53, 1))

test(() => fail());
>test : Symbol(test, Decl(neverType.ts, 53, 1))
>fail : Symbol(fail, Decl(neverType.ts, 3, 1))

test(() => { throw new Error(); })
>test : Symbol(test, Decl(neverType.ts, 53, 1))
>Error : Symbol(Error, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

test(errorCallback);
>test : Symbol(test, Decl(neverType.ts, 53, 1))
>errorCallback : Symbol(errorCallback, Decl(neverType.ts, 60, 3))

