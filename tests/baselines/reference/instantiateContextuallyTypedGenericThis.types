=== tests/cases/compiler/instantiateContextuallyTypedGenericThis.ts ===
interface JQuery {
>JQuery : JQuery

    each<T>(
>each : <T>(collection: T[], callback: (this: T, dit: T) => T) => any
>T : T

        collection: T[], callback: (this: T, dit: T) => T
>collection : T[]
>T : T
>callback : (this: T, dit: T) => T
>this : T
>T : T
>dit : T
>T : T
>T : T

    ): any;
}

let $: JQuery;
>$ : JQuery
>JQuery : JQuery

let lines: string[];
>lines : string[]

$.each(lines, function(dit) {
>$.each(lines, function(dit) {    return dit.charAt(0) + this.charAt(1);}) : any
>$.each : <T>(collection: T[], callback: (this: T, dit: T) => T) => any
>$ : JQuery
>each : <T>(collection: T[], callback: (this: T, dit: T) => T) => any
>lines : string[]
>function(dit) {    return dit.charAt(0) + this.charAt(1);} : (dit: string) => string
>dit : string

    return dit.charAt(0) + this.charAt(1);
>dit.charAt(0) + this.charAt(1) : string
>dit.charAt(0) : string
>dit.charAt : (pos: number) => string
>dit : string
>charAt : (pos: number) => string
>0 : number
>this.charAt(1) : string
>this.charAt : (pos: number) => string
>this : string
>charAt : (pos: number) => string
>1 : number

});

