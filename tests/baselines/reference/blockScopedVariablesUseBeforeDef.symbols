=== tests/cases/compiler/blockScopedVariablesUseBeforeDef.ts ===
function foo1() {
>foo1 : Symbol(foo1, Decl(blockScopedVariablesUseBeforeDef.ts, 0, 0))

	let a = () => x;
>a : Symbol(a, Decl(blockScopedVariablesUseBeforeDef.ts, 1, 4))
>x : Symbol(x, Decl(blockScopedVariablesUseBeforeDef.ts, 2, 4))

	let x;
>x : Symbol(x, Decl(blockScopedVariablesUseBeforeDef.ts, 2, 4))
}

function foo2() {
>foo2 : Symbol(foo2, Decl(blockScopedVariablesUseBeforeDef.ts, 3, 1))

	let a = function () { return x; }
>a : Symbol(a, Decl(blockScopedVariablesUseBeforeDef.ts, 6, 4))
>x : Symbol(x, Decl(blockScopedVariablesUseBeforeDef.ts, 7, 4))

	let x;
>x : Symbol(x, Decl(blockScopedVariablesUseBeforeDef.ts, 7, 4))
}

function foo3() {
>foo3 : Symbol(foo3, Decl(blockScopedVariablesUseBeforeDef.ts, 8, 1))

	class X {
>X : Symbol(X, Decl(blockScopedVariablesUseBeforeDef.ts, 10, 17))

		m() { return x;}
>m : Symbol(m, Decl(blockScopedVariablesUseBeforeDef.ts, 11, 10))
>x : Symbol(x, Decl(blockScopedVariablesUseBeforeDef.ts, 14, 4))
	}
	let x;
>x : Symbol(x, Decl(blockScopedVariablesUseBeforeDef.ts, 14, 4))
}

function foo4() {
>foo4 : Symbol(foo4, Decl(blockScopedVariablesUseBeforeDef.ts, 15, 1))

	let y = class {
>y : Symbol(y, Decl(blockScopedVariablesUseBeforeDef.ts, 18, 4))

		m() { return x; }
>m : Symbol((Anonymous class).m, Decl(blockScopedVariablesUseBeforeDef.ts, 18, 16))
>x : Symbol(x, Decl(blockScopedVariablesUseBeforeDef.ts, 21, 4))

	};
	let x;
>x : Symbol(x, Decl(blockScopedVariablesUseBeforeDef.ts, 21, 4))
}

function foo5() {
>foo5 : Symbol(foo5, Decl(blockScopedVariablesUseBeforeDef.ts, 22, 1))

	let x = () => y;
>x : Symbol(x, Decl(blockScopedVariablesUseBeforeDef.ts, 25, 4))
>y : Symbol(y, Decl(blockScopedVariablesUseBeforeDef.ts, 26, 4))

	let y = () => x;
>y : Symbol(y, Decl(blockScopedVariablesUseBeforeDef.ts, 26, 4))
>x : Symbol(x, Decl(blockScopedVariablesUseBeforeDef.ts, 25, 4))
}

function foo6() {
>foo6 : Symbol(foo6, Decl(blockScopedVariablesUseBeforeDef.ts, 27, 1))

	function f() {
>f : Symbol(f, Decl(blockScopedVariablesUseBeforeDef.ts, 29, 17))

		return x;
>x : Symbol(x, Decl(blockScopedVariablesUseBeforeDef.ts, 33, 4))
	}
	let x;
>x : Symbol(x, Decl(blockScopedVariablesUseBeforeDef.ts, 33, 4))
}
