=== tests/cases/compiler/constIndexedAccess.ts ===

const enum numbers {
>numbers : numbers

	zero,
>zero : numbers

	one
>one : numbers
}

interface indexAccess {
>indexAccess : indexAccess

	0: string;
	1: number;
}

let test: indexAccess;
>test : indexAccess
>indexAccess : indexAccess

let s = test[0];
>s : string
>test[0] : string
>test : indexAccess
>0 : number

let n = test[1];
>n : number
>test[1] : number
>test : indexAccess
>1 : number

let s1 = test[numbers.zero];
>s1 : string
>test[numbers.zero] : string
>test : indexAccess
>numbers.zero : numbers
>numbers : typeof numbers
>zero : numbers

let n1 = test[numbers.one];
>n1 : number
>test[numbers.one] : number
>test : indexAccess
>numbers.one : numbers
>numbers : typeof numbers
>one : numbers

/*
TODO: revisit with const propagation

const zero = 0;
const one = 1;

let s2 = test[zero];
let n2 = test[one];

const zeroRef = zero;
const oneRef = one;

let s3 = test[zeroRef];
let n3 = test[oneRef];

const zeroRefEnum = numbers.zero;
const oneRefEnum = numbers.one;

let s4 = test[zeroRefEnum];
let n4 = test[oneRefEnum];
*/
