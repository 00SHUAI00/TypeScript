=== tests/cases/conformance/expressions/contextualTyping/implementedPropertyContextualTyping1.ts ===
interface Event {
>Event : Symbol(Event, Decl(implementedPropertyContextualTyping1.ts, 0, 0))

	time: number
>time : Symbol(time, Decl(implementedPropertyContextualTyping1.ts, 0, 17))
}
interface Base {
>Base : Symbol(Base, Decl(implementedPropertyContextualTyping1.ts, 2, 1))

	superHandle: (e: Event) => number;
>superHandle : Symbol(superHandle, Decl(implementedPropertyContextualTyping1.ts, 3, 16))
>e : Symbol(e, Decl(implementedPropertyContextualTyping1.ts, 4, 15))
>Event : Symbol(Event, Decl(implementedPropertyContextualTyping1.ts, 0, 0))
}
interface Listener extends Base {
>Listener : Symbol(Listener, Decl(implementedPropertyContextualTyping1.ts, 5, 1))
>Base : Symbol(Base, Decl(implementedPropertyContextualTyping1.ts, 2, 1))

	handle: (e: Event) => void;
>handle : Symbol(handle, Decl(implementedPropertyContextualTyping1.ts, 6, 33))
>e : Symbol(e, Decl(implementedPropertyContextualTyping1.ts, 7, 10))
>Event : Symbol(Event, Decl(implementedPropertyContextualTyping1.ts, 0, 0))
}
interface Ringer {
>Ringer : Symbol(Ringer, Decl(implementedPropertyContextualTyping1.ts, 8, 1))

	ring: (times: number) => void;
>ring : Symbol(ring, Decl(implementedPropertyContextualTyping1.ts, 9, 18))
>times : Symbol(times, Decl(implementedPropertyContextualTyping1.ts, 10, 8))
}

class Alarm implements Listener, Ringer {
>Alarm : Symbol(Alarm, Decl(implementedPropertyContextualTyping1.ts, 11, 1))
>Listener : Symbol(Listener, Decl(implementedPropertyContextualTyping1.ts, 5, 1))
>Ringer : Symbol(Ringer, Decl(implementedPropertyContextualTyping1.ts, 8, 1))

	handle = e => { 
>handle : Symbol(handle, Decl(implementedPropertyContextualTyping1.ts, 13, 41))
>e : Symbol(e, Decl(implementedPropertyContextualTyping1.ts, 14, 9))

		let n: number = e.time;
>n : Symbol(n, Decl(implementedPropertyContextualTyping1.ts, 15, 5))
>e.time : Symbol(Event.time, Decl(implementedPropertyContextualTyping1.ts, 0, 17))
>e : Symbol(e, Decl(implementedPropertyContextualTyping1.ts, 14, 9))
>time : Symbol(Event.time, Decl(implementedPropertyContextualTyping1.ts, 0, 17))
	}
	superHandle = e => {
>superHandle : Symbol(superHandle, Decl(implementedPropertyContextualTyping1.ts, 16, 2))
>e : Symbol(e, Decl(implementedPropertyContextualTyping1.ts, 17, 14))

		return e.time;
>e.time : Symbol(Event.time, Decl(implementedPropertyContextualTyping1.ts, 0, 17))
>e : Symbol(e, Decl(implementedPropertyContextualTyping1.ts, 17, 14))
>time : Symbol(Event.time, Decl(implementedPropertyContextualTyping1.ts, 0, 17))
	}
	ring = times => {
>ring : Symbol(ring, Decl(implementedPropertyContextualTyping1.ts, 19, 2))
>times : Symbol(times, Decl(implementedPropertyContextualTyping1.ts, 20, 7))

		let m: number = times + 1;
>m : Symbol(m, Decl(implementedPropertyContextualTyping1.ts, 21, 5))
>times : Symbol(times, Decl(implementedPropertyContextualTyping1.ts, 20, 7))
	}
}
