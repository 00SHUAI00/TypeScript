=== tests/cases/compiler/varArgParamTypeCheck.ts ===
function sequence(...sequences:{():void;}[]) {
>sequence : Symbol(sequence, Decl(varArgParamTypeCheck.ts, 0, 0))
>sequences : Symbol(sequences, Decl(varArgParamTypeCheck.ts, 0, 18))
}

function callback(clb:()=>void) {
>callback : Symbol(callback, Decl(varArgParamTypeCheck.ts, 1, 1))
>clb : Symbol(clb, Decl(varArgParamTypeCheck.ts, 3, 18))
}

sequence(
>sequence : Symbol(sequence, Decl(varArgParamTypeCheck.ts, 0, 0))

    function bar() {
>function bar() {    } : Symbol(bar, Decl(varArgParamTypeCheck.ts, 6, 9))
>bar : Symbol(bar, Decl(varArgParamTypeCheck.ts, 6, 9))

    },
    function foo() {
>function foo() {        callback(()=>{            this();        });    } : Symbol(foo, Decl(varArgParamTypeCheck.ts, 8, 6))
>foo : Symbol(foo, Decl(varArgParamTypeCheck.ts, 8, 6))

        callback(()=>{
>callback : Symbol(callback, Decl(varArgParamTypeCheck.ts, 1, 1))
>()=>{            this();        } : Symbol((Anonymous function), Decl(varArgParamTypeCheck.ts, 10, 17))

            this();
        });
    },
    function baz() {
>function baz() {        callback(()=>{            this();        });    } : Symbol(baz, Decl(varArgParamTypeCheck.ts, 13, 6))
>baz : Symbol(baz, Decl(varArgParamTypeCheck.ts, 13, 6))

        callback(()=>{
>callback : Symbol(callback, Decl(varArgParamTypeCheck.ts, 1, 1))
>()=>{            this();        } : Symbol((Anonymous function), Decl(varArgParamTypeCheck.ts, 15, 17))

            this();
        });
    }
);

