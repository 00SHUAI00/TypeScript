=== tests/cases/conformance/types/promised/promised.ts ===

var p00: Promise<boolean>;
>p00 : Symbol(p00, Decl(promised.ts, 1, 3))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))

var p01: Promise<Promise<boolean>>;
>p01 : Symbol(p01, Decl(promised.ts, 2, 3))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))

var p02: Promise<PromiseLike<boolean>>;
>p02 : Symbol(p02, Decl(promised.ts, 3, 3))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
>PromiseLike : Symbol(PromiseLike, Decl(lib.es5.d.ts, --, --))

var p03: Promise<{ then(cb: (value: boolean) => any): any; }>;
>p03 : Symbol(p03, Decl(promised.ts, 4, 3))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
>then : Symbol(then, Decl(promised.ts, 4, 18))
>cb : Symbol(cb, Decl(promised.ts, 4, 24))
>value : Symbol(value, Decl(promised.ts, 4, 29))

var p04: boolean | Promise<boolean>;
>p04 : Symbol(p04, Decl(promised.ts, 5, 3))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))

var p05: promised Promise<boolean>;
>p05 : Symbol(p05, Decl(promised.ts, 6, 3))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))

var p06: promised Promise<Promise<boolean>>;
>p06 : Symbol(p06, Decl(promised.ts, 7, 3))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))

var p07: promised Promise<PromiseLike<boolean>>;
>p07 : Symbol(p07, Decl(promised.ts, 8, 3))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
>PromiseLike : Symbol(PromiseLike, Decl(lib.es5.d.ts, --, --))

var p08: promised Promise<{ then(cb: (value: boolean) => any): any; }>;
>p08 : Symbol(p08, Decl(promised.ts, 9, 3))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
>then : Symbol(then, Decl(promised.ts, 9, 27))
>cb : Symbol(cb, Decl(promised.ts, 9, 33))
>value : Symbol(value, Decl(promised.ts, 9, 38))

var p09: promised (boolean | Promise<boolean>);
>p09 : Symbol(p09, Decl(promised.ts, 10, 3))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))

var p0a: { a: "A", b: Promise<"B"> };
>p0a : Symbol(p0a, Decl(promised.ts, 11, 3))
>a : Symbol(a, Decl(promised.ts, 11, 10))
>b : Symbol(b, Decl(promised.ts, 11, 18))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))

var p0b: Promise<{ a: "A", b: Promise<"B"> }>;
>p0b : Symbol(p0b, Decl(promised.ts, 12, 3))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
>a : Symbol(a, Decl(promised.ts, 12, 18))
>b : Symbol(b, Decl(promised.ts, 12, 26))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))

const cp0 = { p00, p01, p02, p03, p04, p05, p06, p07, p08, p09 };
>cp0 : Symbol(cp0, Decl(promised.ts, 13, 5))
>p00 : Symbol(p00, Decl(promised.ts, 13, 13))
>p01 : Symbol(p01, Decl(promised.ts, 13, 18))
>p02 : Symbol(p02, Decl(promised.ts, 13, 23))
>p03 : Symbol(p03, Decl(promised.ts, 13, 28))
>p04 : Symbol(p04, Decl(promised.ts, 13, 33))
>p05 : Symbol(p05, Decl(promised.ts, 13, 38))
>p06 : Symbol(p06, Decl(promised.ts, 13, 43))
>p07 : Symbol(p07, Decl(promised.ts, 13, 48))
>p08 : Symbol(p08, Decl(promised.ts, 13, 53))
>p09 : Symbol(p09, Decl(promised.ts, 13, 58))

function f00() { var p: promised typeof p00; return p; }
>f00 : Symbol(f00, Decl(promised.ts, 13, 65))
>p : Symbol(p, Decl(promised.ts, 15, 20))
>p00 : Symbol(p00, Decl(promised.ts, 1, 3))
>p : Symbol(p, Decl(promised.ts, 15, 20))

function f01() { var p: promised typeof p01; return p; }
>f01 : Symbol(f01, Decl(promised.ts, 15, 56))
>p : Symbol(p, Decl(promised.ts, 16, 20))
>p01 : Symbol(p01, Decl(promised.ts, 2, 3))
>p : Symbol(p, Decl(promised.ts, 16, 20))

function f02() { var p: promised typeof p02; return p; }
>f02 : Symbol(f02, Decl(promised.ts, 16, 56))
>p : Symbol(p, Decl(promised.ts, 17, 20))
>p02 : Symbol(p02, Decl(promised.ts, 3, 3))
>p : Symbol(p, Decl(promised.ts, 17, 20))

function f03() { var p: promised typeof p03; return p; }
>f03 : Symbol(f03, Decl(promised.ts, 17, 56))
>p : Symbol(p, Decl(promised.ts, 18, 20))
>p03 : Symbol(p03, Decl(promised.ts, 4, 3))
>p : Symbol(p, Decl(promised.ts, 18, 20))

function f04() { var p: promised typeof p04; return p; }
>f04 : Symbol(f04, Decl(promised.ts, 18, 56))
>p : Symbol(p, Decl(promised.ts, 19, 20))
>p04 : Symbol(p04, Decl(promised.ts, 5, 3))
>p : Symbol(p, Decl(promised.ts, 19, 20))

function f05() { return p05; }
>f05 : Symbol(f05, Decl(promised.ts, 19, 56))
>p05 : Symbol(p05, Decl(promised.ts, 6, 3))

function f06() { return p06; }
>f06 : Symbol(f06, Decl(promised.ts, 20, 30))
>p06 : Symbol(p06, Decl(promised.ts, 7, 3))

function f07() { return p07; }
>f07 : Symbol(f07, Decl(promised.ts, 21, 30))
>p07 : Symbol(p07, Decl(promised.ts, 8, 3))

function f08() { return p08; }
>f08 : Symbol(f08, Decl(promised.ts, 22, 30))
>p08 : Symbol(p08, Decl(promised.ts, 9, 3))

function f09() { return p09; }
>f09 : Symbol(f09, Decl(promised.ts, 23, 30))
>p09 : Symbol(p09, Decl(promised.ts, 10, 3))

function f10<T>(x: T) { var p: promised T; return p; }
>f10 : Symbol(f10, Decl(promised.ts, 24, 30))
>T : Symbol(T, Decl(promised.ts, 26, 13))
>x : Symbol(x, Decl(promised.ts, 26, 16))
>T : Symbol(T, Decl(promised.ts, 26, 13))
>p : Symbol(p, Decl(promised.ts, 26, 27))
>T : Symbol(T, Decl(promised.ts, 26, 13))
>p : Symbol(p, Decl(promised.ts, 26, 27))

const c10p00 = f10(p00);
>c10p00 : Symbol(c10p00, Decl(promised.ts, 27, 5))
>f10 : Symbol(f10, Decl(promised.ts, 24, 30))
>p00 : Symbol(p00, Decl(promised.ts, 1, 3))

const c10p01 = f10(p01);
>c10p01 : Symbol(c10p01, Decl(promised.ts, 28, 5))
>f10 : Symbol(f10, Decl(promised.ts, 24, 30))
>p01 : Symbol(p01, Decl(promised.ts, 2, 3))

const c10p02 = f10(p02);
>c10p02 : Symbol(c10p02, Decl(promised.ts, 29, 5))
>f10 : Symbol(f10, Decl(promised.ts, 24, 30))
>p02 : Symbol(p02, Decl(promised.ts, 3, 3))

const c10p03 = f10(p03);
>c10p03 : Symbol(c10p03, Decl(promised.ts, 30, 5))
>f10 : Symbol(f10, Decl(promised.ts, 24, 30))
>p03 : Symbol(p03, Decl(promised.ts, 4, 3))

const c10p04 = f10(p04);
>c10p04 : Symbol(c10p04, Decl(promised.ts, 31, 5))
>f10 : Symbol(f10, Decl(promised.ts, 24, 30))
>p04 : Symbol(p04, Decl(promised.ts, 5, 3))

const c10p05 = f10(p05);
>c10p05 : Symbol(c10p05, Decl(promised.ts, 32, 5))
>f10 : Symbol(f10, Decl(promised.ts, 24, 30))
>p05 : Symbol(p05, Decl(promised.ts, 6, 3))

const c10p06 = f10(p06);
>c10p06 : Symbol(c10p06, Decl(promised.ts, 33, 5))
>f10 : Symbol(f10, Decl(promised.ts, 24, 30))
>p06 : Symbol(p06, Decl(promised.ts, 7, 3))

const c10p07 = f10(p07);
>c10p07 : Symbol(c10p07, Decl(promised.ts, 34, 5))
>f10 : Symbol(f10, Decl(promised.ts, 24, 30))
>p07 : Symbol(p07, Decl(promised.ts, 8, 3))

const c10p08 = f10(p08);
>c10p08 : Symbol(c10p08, Decl(promised.ts, 35, 5))
>f10 : Symbol(f10, Decl(promised.ts, 24, 30))
>p08 : Symbol(p08, Decl(promised.ts, 9, 3))

const c10p09 = f10(p09);
>c10p09 : Symbol(c10p09, Decl(promised.ts, 36, 5))
>f10 : Symbol(f10, Decl(promised.ts, 24, 30))
>p09 : Symbol(p09, Decl(promised.ts, 10, 3))

function f11<T>(x: T) { var y: { [P in keyof T]: promised T[P] }; return y; }
>f11 : Symbol(f11, Decl(promised.ts, 36, 24))
>T : Symbol(T, Decl(promised.ts, 38, 13))
>x : Symbol(x, Decl(promised.ts, 38, 16))
>T : Symbol(T, Decl(promised.ts, 38, 13))
>y : Symbol(y, Decl(promised.ts, 38, 27))
>P : Symbol(P, Decl(promised.ts, 38, 34))
>T : Symbol(T, Decl(promised.ts, 38, 13))
>T : Symbol(T, Decl(promised.ts, 38, 13))
>P : Symbol(P, Decl(promised.ts, 38, 34))
>y : Symbol(y, Decl(promised.ts, 38, 27))

const f11c00 = f11(cp0);
>f11c00 : Symbol(f11c00, Decl(promised.ts, 39, 5))
>f11 : Symbol(f11, Decl(promised.ts, 36, 24))
>cp0 : Symbol(cp0, Decl(promised.ts, 13, 5))

function f12<T, K extends keyof T>(x: T, ...k: K[]) { var y: { [P in K]: promised T[K]; }; return y; }
>f12 : Symbol(f12, Decl(promised.ts, 39, 24))
>T : Symbol(T, Decl(promised.ts, 41, 13))
>K : Symbol(K, Decl(promised.ts, 41, 15))
>T : Symbol(T, Decl(promised.ts, 41, 13))
>x : Symbol(x, Decl(promised.ts, 41, 35))
>T : Symbol(T, Decl(promised.ts, 41, 13))
>k : Symbol(k, Decl(promised.ts, 41, 40))
>K : Symbol(K, Decl(promised.ts, 41, 15))
>y : Symbol(y, Decl(promised.ts, 41, 57))
>P : Symbol(P, Decl(promised.ts, 41, 64))
>K : Symbol(K, Decl(promised.ts, 41, 15))
>T : Symbol(T, Decl(promised.ts, 41, 13))
>K : Symbol(K, Decl(promised.ts, 41, 15))
>y : Symbol(y, Decl(promised.ts, 41, 57))

const f12c00 = f12(cp0, "p00");
>f12c00 : Symbol(f12c00, Decl(promised.ts, 42, 5))
>f12 : Symbol(f12, Decl(promised.ts, 39, 24))
>cp0 : Symbol(cp0, Decl(promised.ts, 13, 5))

const f12c01 = f12(cp0, "p01");
>f12c01 : Symbol(f12c01, Decl(promised.ts, 43, 5))
>f12 : Symbol(f12, Decl(promised.ts, 39, 24))
>cp0 : Symbol(cp0, Decl(promised.ts, 13, 5))

const f12c02 = f12(cp0, "p02");
>f12c02 : Symbol(f12c02, Decl(promised.ts, 44, 5))
>f12 : Symbol(f12, Decl(promised.ts, 39, 24))
>cp0 : Symbol(cp0, Decl(promised.ts, 13, 5))

const f12c03 = f12(cp0, "p03");
>f12c03 : Symbol(f12c03, Decl(promised.ts, 45, 5))
>f12 : Symbol(f12, Decl(promised.ts, 39, 24))
>cp0 : Symbol(cp0, Decl(promised.ts, 13, 5))

const f12c04 = f12(cp0, "p04");
>f12c04 : Symbol(f12c04, Decl(promised.ts, 46, 5))
>f12 : Symbol(f12, Decl(promised.ts, 39, 24))
>cp0 : Symbol(cp0, Decl(promised.ts, 13, 5))

const f12c05 = f12(cp0, "p05");
>f12c05 : Symbol(f12c05, Decl(promised.ts, 47, 5))
>f12 : Symbol(f12, Decl(promised.ts, 39, 24))
>cp0 : Symbol(cp0, Decl(promised.ts, 13, 5))

const f12c06 = f12(cp0, "p06");
>f12c06 : Symbol(f12c06, Decl(promised.ts, 48, 5))
>f12 : Symbol(f12, Decl(promised.ts, 39, 24))
>cp0 : Symbol(cp0, Decl(promised.ts, 13, 5))

const f12c07 = f12(cp0, "p07");
>f12c07 : Symbol(f12c07, Decl(promised.ts, 49, 5))
>f12 : Symbol(f12, Decl(promised.ts, 39, 24))
>cp0 : Symbol(cp0, Decl(promised.ts, 13, 5))

const f12c08 = f12(cp0, "p08");
>f12c08 : Symbol(f12c08, Decl(promised.ts, 50, 5))
>f12 : Symbol(f12, Decl(promised.ts, 39, 24))
>cp0 : Symbol(cp0, Decl(promised.ts, 13, 5))

const f12c09 = f12(cp0, "p09");
>f12c09 : Symbol(f12c09, Decl(promised.ts, 51, 5))
>f12 : Symbol(f12, Decl(promised.ts, 39, 24))
>cp0 : Symbol(cp0, Decl(promised.ts, 13, 5))

const f12c00c05 = f12(cp0, "p00", "p05");
>f12c00c05 : Symbol(f12c00c05, Decl(promised.ts, 52, 5))
>f12 : Symbol(f12, Decl(promised.ts, 39, 24))
>cp0 : Symbol(cp0, Decl(promised.ts, 13, 5))

const f12c04c09 = f12(cp0, "p04", "p09");
>f12c04c09 : Symbol(f12c04c09, Decl(promised.ts, 53, 5))
>f12 : Symbol(f12, Decl(promised.ts, 39, 24))
>cp0 : Symbol(cp0, Decl(promised.ts, 13, 5))

type t00 = { [P in promised "a"]: P; };
>t00 : Symbol(t00, Decl(promised.ts, 53, 41))
>P : Symbol(P, Decl(promised.ts, 55, 14))
>P : Symbol(P, Decl(promised.ts, 55, 14))

var t00v00: t00;
>t00v00 : Symbol(t00v00, Decl(promised.ts, 56, 3))
>t00 : Symbol(t00, Decl(promised.ts, 53, 41))

const t00v00c00 = t00v00.a;
>t00v00c00 : Symbol(t00v00c00, Decl(promised.ts, 57, 5))
>t00v00.a : Symbol(a)
>t00v00 : Symbol(t00v00, Decl(promised.ts, 56, 3))
>a : Symbol(a)

type t01 = { [P in promised Promise<"b">]: P; };
>t01 : Symbol(t01, Decl(promised.ts, 57, 27))
>P : Symbol(P, Decl(promised.ts, 59, 14))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
>P : Symbol(P, Decl(promised.ts, 59, 14))

var t01v00: t01;
>t01v00 : Symbol(t01v00, Decl(promised.ts, 60, 3))
>t01 : Symbol(t01, Decl(promised.ts, 57, 27))

const t01v00c00 = t01v00.b;
>t01v00c00 : Symbol(t01v00c00, Decl(promised.ts, 61, 5))
>t01v00.b : Symbol(b)
>t01v00 : Symbol(t01v00, Decl(promised.ts, 60, 3))
>b : Symbol(b)

type t02 = { [P in promised ("a" | Promise<"b">)]: P; };
>t02 : Symbol(t02, Decl(promised.ts, 61, 27))
>P : Symbol(P, Decl(promised.ts, 63, 14))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
>P : Symbol(P, Decl(promised.ts, 63, 14))

var t02v00: t02;
>t02v00 : Symbol(t02v00, Decl(promised.ts, 64, 3))
>t02 : Symbol(t02, Decl(promised.ts, 61, 27))

const t02v00c00 = t02v00.a;
>t02v00c00 : Symbol(t02v00c00, Decl(promised.ts, 65, 5))
>t02v00.a : Symbol(a)
>t02v00 : Symbol(t02v00, Decl(promised.ts, 64, 3))
>a : Symbol(a)

const t02v00c01 = t02v00.b;
>t02v00c01 : Symbol(t02v00c01, Decl(promised.ts, 66, 5))
>t02v00.b : Symbol(b)
>t02v00 : Symbol(t02v00, Decl(promised.ts, 64, 3))
>b : Symbol(b)

type t03<T> = { [P in keyof promised T]: promised (promised T)[P]; };
>t03 : Symbol(t03, Decl(promised.ts, 66, 27))
>T : Symbol(T, Decl(promised.ts, 68, 9))
>P : Symbol(P, Decl(promised.ts, 68, 17))
>T : Symbol(T, Decl(promised.ts, 68, 9))
>T : Symbol(T, Decl(promised.ts, 68, 9))
>P : Symbol(P, Decl(promised.ts, 68, 17))

var t03v00: t03<typeof p0a>;
>t03v00 : Symbol(t03v00, Decl(promised.ts, 69, 3))
>t03 : Symbol(t03, Decl(promised.ts, 66, 27))
>p0a : Symbol(p0a, Decl(promised.ts, 11, 3))

const t03v00c00 = t03v00.a;
>t03v00c00 : Symbol(t03v00c00, Decl(promised.ts, 70, 5))
>t03v00.a : Symbol(a)
>t03v00 : Symbol(t03v00, Decl(promised.ts, 69, 3))
>a : Symbol(a)

const t03v00c01 = t03v00.b;
>t03v00c01 : Symbol(t03v00c01, Decl(promised.ts, 71, 5))
>t03v00.b : Symbol(b)
>t03v00 : Symbol(t03v00, Decl(promised.ts, 69, 3))
>b : Symbol(b)

var t03v01: t03<typeof p0b>;
>t03v01 : Symbol(t03v01, Decl(promised.ts, 72, 3))
>t03 : Symbol(t03, Decl(promised.ts, 66, 27))
>p0b : Symbol(p0b, Decl(promised.ts, 12, 3))

const t03v01c00 = t03v01.a;
>t03v01c00 : Symbol(t03v01c00, Decl(promised.ts, 73, 5))
>t03v01.a : Symbol(a)
>t03v01 : Symbol(t03v01, Decl(promised.ts, 72, 3))
>a : Symbol(a)

const t03v01c01 = t03v01.b;
>t03v01c01 : Symbol(t03v01c01, Decl(promised.ts, 74, 5))
>t03v01.b : Symbol(b)
>t03v01 : Symbol(t03v01, Decl(promised.ts, 72, 3))
>b : Symbol(b)

function f13<T>(x: T) { var y: t03<T>; return y; }
>f13 : Symbol(f13, Decl(promised.ts, 74, 27))
>T : Symbol(T, Decl(promised.ts, 76, 13))
>x : Symbol(x, Decl(promised.ts, 76, 16))
>T : Symbol(T, Decl(promised.ts, 76, 13))
>y : Symbol(y, Decl(promised.ts, 76, 27))
>t03 : Symbol(t03, Decl(promised.ts, 66, 27))
>T : Symbol(T, Decl(promised.ts, 76, 13))
>y : Symbol(y, Decl(promised.ts, 76, 27))

const f13c00 = f13(p0a);
>f13c00 : Symbol(f13c00, Decl(promised.ts, 77, 5))
>f13 : Symbol(f13, Decl(promised.ts, 74, 27))
>p0a : Symbol(p0a, Decl(promised.ts, 11, 3))

const f13c00c00 = f13c00.a;
>f13c00c00 : Symbol(f13c00c00, Decl(promised.ts, 78, 5))
>f13c00.a : Symbol(a)
>f13c00 : Symbol(f13c00, Decl(promised.ts, 77, 5))
>a : Symbol(a)

const f13c00c01 = f13c00.b;
>f13c00c01 : Symbol(f13c00c01, Decl(promised.ts, 79, 5))
>f13c00.b : Symbol(b)
>f13c00 : Symbol(f13c00, Decl(promised.ts, 77, 5))
>b : Symbol(b)

const f13c01 = f13(p0b);
>f13c01 : Symbol(f13c01, Decl(promised.ts, 80, 5))
>f13 : Symbol(f13, Decl(promised.ts, 74, 27))
>p0b : Symbol(p0b, Decl(promised.ts, 12, 3))

const f13c01c00 = f13c01.a;
>f13c01c00 : Symbol(f13c01c00, Decl(promised.ts, 81, 5))
>f13c01.a : Symbol(a)
>f13c01 : Symbol(f13c01, Decl(promised.ts, 80, 5))
>a : Symbol(a)

const f13c01c01 = f13c01.b;
>f13c01c01 : Symbol(f13c01c01, Decl(promised.ts, 82, 5))
>f13c01.b : Symbol(b)
>f13c01 : Symbol(f13c01, Decl(promised.ts, 80, 5))
>b : Symbol(b)

